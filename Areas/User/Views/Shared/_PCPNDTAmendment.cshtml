
@model Medical.Models.PCPNDTAmendmentModel

<div class="row">
    <div class="col-md-12">
        <!-- Custom Tabs -->
        <div class="nav-tabs-custom">
            <ul class="nav nav-tabs">
                <li class="active"><a href="#tabApplicantAmendment" data-toggle="tab">Applicant</a></li>
                <li id="li_Facilityreg"><a href="#tabFacility" data-toggle="tab">Facility for Registration</a></li>
                <li id="li_Tests"><a href="#tabTests" data-toggle="tab">Tests</a></li>
                <li id="li_Equip"><a href="#tabEquipment" data-toggle="tab">Equipment</a></li>
                <li id="li_TestFacility"><a href="#tabFacilities" data-toggle="tab">Facilities for Test</a></li>
                <li id="li_Employee"><a href="#tabEmployee" data-toggle="tab">Employees</a></li>
                <li id="li_OwnerInst"><a href="#tabOwnership" data-toggle="tab">Ownership & Institution</a></li>
                <li id="li_Declare"><a href="#tabDeclaration" data-toggle="tab">Declaration</a></li>
                <li id="li_LicenseCancel"><a href="#tabLicenseCancel" data-toggle="tab">License Cancel</a></li>
            </ul>
            <div class="tab-content">
                @*1st tab Applicant*@

                <div class="tab-pane active" id="tabApplicantAmendment">
                    <form id="formApplicant">
                        <div class="row">
                            <div class="col-md-1">
                                @Html.LabelFor(model => model.PCPNDTModel.ApplicantModel.Name, new { @class = "control-label" })
                            </div>
                            <div class="col-md-3">
                                @Html.HiddenFor(model => model.PCPNDTModel.ApplicantModel.Id)
                                @Html.DisplayFor(model => model.PCPNDTModel.ApplicantModel.Name, new { htmlAttributes = new { @class = "form-control" } })
                                @Html.ValidationMessageFor(model => model.PCPNDTModel.ApplicantModel.Name, "", new { @class = "text-danger" })
                            </div>
                            <div class="col-md-1">
                                @Html.LabelFor(model => model.PCPNDTModel.ApplicantModel.ApplicantRole, new { @class = "control-label" })
                            </div>
                            <div class="col-md-3">
                                @Html.DisplayFor(model => model.PCPNDTModel.ApplicantModel.ApplicantRole)
                                @Html.ValidationMessageFor(model => model.PCPNDTModel.ApplicantModel.ApplicantRole, "", new { @class = "text-danger" })
                            </div>
                            <div class="col-md-1 applicantroleother" hidden>
                                @Html.LabelFor(model => model.PCPNDTModel.ApplicantModel.ApplicantRoleOther, new { @class = "control-label" })
                            </div>
                            <div class="col-md-3 applicantroleother" hidden>
                                @Html.DisplayFor(model => model.PCPNDTModel.ApplicantModel.ApplicantRoleOther, new { htmlAttributes = new { @class = "form-control" } })
                                @Html.ValidationMessageFor(model => model.PCPNDTModel.ApplicantModel.ApplicantRoleOther, "", new { @class = "text-danger" })
                            </div>
                        </div>
                        <div class="row">
                            <div class="col-md-1">
                                @Html.LabelFor(model => model.PCPNDTModel.ApplicantModel.DistrictId, new { @class = "control-label" })
                            </div>
                            <div class="col-md-3">
                                @Html.DisplayFor(model => model.PCPNDTModel.ApplicantModel.DistrictName)
                                @Html.ValidationMessageFor(model => model.PCPNDTModel.ApplicantModel.DistrictId, "", new { @class = "text-danger" })
                            </div>
                            <div class="col-md-1">
                                @Html.LabelFor(model => model.PCPNDTModel.ApplicantModel.MandalId, new { @class = "control-label" })
                            </div>
                            <div class="col-md-3">
                                @Html.DisplayFor(model => model.PCPNDTModel.ApplicantModel.MandalName)
                                @Html.ValidationMessageFor(model => model.PCPNDTModel.ApplicantModel.MandalId, "", new { @class = "text-danger" })
                            </div>
                            <div class="col-md-1">
                                @Html.LabelFor(model => model.PCPNDTModel.ApplicantModel.VillageId, new { @class = "control-label" })
                            </div>
                            <div class="col-md-3">
                                @Html.DisplayFor(model => model.PCPNDTModel.ApplicantModel.VillageName)
                                @Html.ValidationMessageFor(model => model.PCPNDTModel.ApplicantModel.VillageId, "", new { @class = "text-danger" })
                            </div>
                        </div>
                        <div class="row">
                            <div class="col-md-1">
                                @Html.LabelFor(model => model.PCPNDTModel.ApplicantModel.Aadhar, new { @class = "control-label" })
                            </div>
                            <div class="col-md-3">
                                @Html.DisplayFor(model => model.PCPNDTModel.ApplicantModel.Aadhar, new { htmlAttributes = new { @class = "form-control numeric" } })
                                @Html.ValidationMessageFor(model => model.PCPNDTModel.ApplicantModel.Aadhar, "", new { @class = "text-danger" })
                            </div>
                            <div class="col-md-1">
                                @Html.LabelFor(model => model.PCPNDTModel.ApplicantModel.PAN, new { @class = "control-label" })
                            </div>
                            <div class="col-md-3">
                                @Html.DisplayFor(model => model.PCPNDTModel.ApplicantModel.PAN, new { htmlAttributes = new { @class = "form-control" } })
                                @Html.ValidationMessageFor(model => model.PCPNDTModel.ApplicantModel.PAN, "", new { @class = "text-danger" })
                            </div>
                            <div class="col-md-1">
                                @Html.LabelFor(model => model.PCPNDTModel.ApplicantModel.HouseNumber, new { @class = "control-label" })
                            </div>
                            <div class="col-md-3">
                                @Html.DisplayFor(model => model.PCPNDTModel.ApplicantModel.HouseNumber, new { htmlAttributes = new { @class = "form-control" } })
                                @Html.ValidationMessageFor(model => model.PCPNDTModel.ApplicantModel.HouseNumber, "", new { @class = "text-danger" })
                            </div>
                        </div>
                        <div class="row">
                            <div class="col-md-1">
                                @Html.LabelFor(model => model.PCPNDTModel.ApplicantModel.StreetName, new { @class = "control-label" })
                            </div>
                            <div class="col-md-3">
                                @Html.DisplayFor(model => model.PCPNDTModel.ApplicantModel.StreetName, new { htmlAttributes = new { @class = "form-control" } })
                                @Html.ValidationMessageFor(model => model.PCPNDTModel.ApplicantModel.StreetName, "", new { @class = "text-danger" })
                            </div>
                            <div class="col-md-1">
                                @Html.LabelFor(model => model.PCPNDTModel.ApplicantModel.PINCode, new { @class = "control-label" })
                            </div>
                            <div class="col-md-3">
                                @Html.DisplayFor(model => model.PCPNDTModel.ApplicantModel.PINCode, new { htmlAttributes = new { @class = "form-control numeric" } })
                                @Html.ValidationMessageFor(model => model.PCPNDTModel.ApplicantModel.PINCode, "", new { @class = "text-danger" })
                            </div>
                            @*<div class="col-md-4 text-right">
                            <input type="button" value="Clear" id="btnApplicantClear" class="btn btn-default" />
                            <input type="button" value="Save" id="btnApplicantSave" class="btn btn-primary" />
                        </div>*@
                        </div>
                    </form>
                </div>

                @*1st tab Applicant*@

                @*1st tab Facilities*@

                <div class="tab-pane" id="tabFacility">
                    @if (Model.FacilityAmendment == true)
                    {
                        <form id="formFacility">
                            <fieldset class="scheduler-border">
                                <legend class="scheduler-border">Facilities</legend>
                                <div class="row">
                                    <div class="col-md-offset-1 col-md-3">
                                        @Html.CheckBox("facilitytype", new { @value = ViewBag.FacilityMaster[0].Id }) @ViewBag.FacilityMaster[0].Name
                                    </div>
                                    <div class="col-md-3">
                                        @Html.CheckBox("facilitytype", new { @value = ViewBag.FacilityMaster[1].Id }) @ViewBag.FacilityMaster[1].Name
                                    </div>
                                    <div class="col-md-4">
                                        @Html.CheckBox("facilitytype", new { @value = ViewBag.FacilityMaster[2].Id }) @ViewBag.FacilityMaster[2].Name
                                    </div>
                                </div>
                                <div class="row">
                                    <div class="col-md-offset-1 col-md-3">
                                        @Html.CheckBox("facilitytype", new { @value = ViewBag.FacilityMaster[3].Id }) @ViewBag.FacilityMaster[3].Name
                                    </div>
                                    <div class="col-md-3">
                                        @Html.CheckBox("facilitytype", new { @value = ViewBag.FacilityMaster[4].Id }) @ViewBag.FacilityMaster[4].Name
                                    </div>
                                    <div class="col-md-4">
                                        @Html.CheckBox("facilitytype", new { @value = ViewBag.FacilityMaster[5].Id }) @ViewBag.FacilityMaster[5].Name
                                    </div>
                                </div>
                            </fieldset>
                            <div id="tabFacilityinfo">
                                <div class="row">
                                    <div class="col-md-1">
                                        @Html.LabelFor(model => model.PCPNDTModel.FacilityModel.Name, new { @class = "control-label" })
                                    </div>
                                    <div class="col-md-3">
                                        @Html.HiddenFor(model => model.PCPNDTModel.FacilityModel.Id)
                                        @Html.TextBoxFor(model => model.PCPNDTModel.FacilityModel.Name, new { @class = "form-control" })

                                    </div>
                                    <div class="col-md-1">
                                        @Html.LabelFor(model => model.PCPNDTModel.FacilityModel.DistrictId, new { @class = "control-label" })
                                    </div>
                                    <div class="col-md-3">
                                        @Html.HiddenFor(model => model.PCPNDTModel.FacilityModel.DistrictId, new { })
                                        @Html.TextBoxFor(model => model.PCPNDTModel.FacilityModel.DistrictName, new { @class = "form-control" })
                                    </div>
                                    <div class="col-md-1">
                                        @Html.LabelFor(model => model.PCPNDTModel.FacilityModel.MandalId, new { @class = "control-label" })
                                    </div>
                                    <div class="col-md-3">
                                        @Html.HiddenFor(model => model.PCPNDTModel.FacilityModel.MandalId, new { })
                                        @Html.TextBoxFor(model => model.PCPNDTModel.FacilityModel.MandalName, new { @class = "form-control" })

                                    </div>
                                </div>
                                <div class="row">
                                    <div class="col-md-1">
                                        @Html.LabelFor(model => model.PCPNDTModel.FacilityModel.VillageId, new { @class = "control-label" })
                                    </div>
                                    <div class="col-md-3">
                                        @Html.HiddenFor(model => model.PCPNDTModel.FacilityModel.VillageId, new { })
                                        @Html.TextBoxFor(model => model.PCPNDTModel.FacilityModel.VillageName, new { @class = "form-control" })

                                    </div>
                                    <div class="col-md-1">
                                        @Html.LabelFor(model => model.PCPNDTModel.FacilityModel.HouseNumber, new { @class = "control-label" })
                                    </div>
                                    <div class="col-md-3">
                                        @Html.TextBoxFor(model => model.PCPNDTModel.FacilityModel.HouseNumber, new { @class = "form-control" })

                                    </div>
                                    <div class="col-md-1">
                                        @Html.LabelFor(model => model.PCPNDTModel.FacilityModel.StreetName, new { @class = "control-label" })
                                    </div>
                                    <div class="col-md-3">
                                        @Html.TextBoxFor(model => model.PCPNDTModel.FacilityModel.StreetName, new { @class = "form-control" })

                                    </div>
                                </div>
                                <div class="row">
                                    <div class="col-md-1">
                                        @Html.LabelFor(model => model.PCPNDTModel.FacilityModel.Phone, new { @class = "control-label" })
                                    </div>
                                    <div class="col-md-3">
                                        @Html.TextBoxFor(model => model.PCPNDTModel.FacilityModel.Phone, new { @class = "form-control numeric" })

                                    </div>
                                    <div class="col-md-1">
                                        @Html.LabelFor(model => model.PCPNDTModel.FacilityModel.Email, new { @class = "control-label" })
                                    </div>
                                    <div class="col-md-3">
                                        @Html.TextBoxFor(model => model.PCPNDTModel.FacilityModel.Email, new { @class = "form-control" })
                                        @Html.ValidationMessageFor(model => model.PCPNDTModel.FacilityModel.Email, "", new { @class = "text-danger" })
                                    </div>
                                    <div class="col-md-1">
                                        @Html.LabelFor(model => model.PCPNDTModel.FacilityModel.Fax, new { @class = "control-label" })
                                    </div>
                                    <div class="col-md-3">
                                        @Html.TextBoxFor(model => model.PCPNDTModel.FacilityModel.Fax, new { @class = "form-control" })

                                    </div>
                                </div>
                                <div class="row">
                                    <div class="col-md-1">
                                        @Html.LabelFor(model => model.PCPNDTModel.FacilityModel.Telegraph, new { @class = "control-label" })
                                    </div>
                                    <div class="col-md-3">
                                        @Html.TextBoxFor(model => model.PCPNDTModel.FacilityModel.Telegraph, new { @class = "form-control" })

                                    </div>
                                    <div class="col-md-1">
                                        @Html.LabelFor(model => model.PCPNDTModel.FacilityModel.Telex, new { @class = "control-label" })
                                    </div>
                                    <div class="col-md-3">
                                        @Html.TextBoxFor(model => model.PCPNDTModel.FacilityModel.Telex, new { @class = "form-control" })

                                    </div>
                                    <div class="col-md-1">
                                        @Html.LabelFor(model => model.PCPNDTModel.FacilityModel.PINCode, new { @class = "control-label" })
                                    </div>
                                    <div class="col-md-3">
                                        @Html.TextBoxFor(model => model.PCPNDTModel.FacilityModel.PINCode, new { @class = "form-control" })

                                    </div>
                                </div>
                                <div class="row">
                                    <div class="col-md-2">
                                        @Html.LabelFor(model => model.PCPNDTModel.FacilityModel.AddressProofPath, new { @class = "control-label" })
                                    </div>
                                    <div class="col-md-2">
                                        @Html.TextBoxFor(model => model.PCPNDTModel.FacilityModel.AddressProofPath, new { @class = "", type = "file", @style = "margin-left:-58%;", @id = "AddressProofPath" })
                                        @if (!string.IsNullOrEmpty(Model.PCPNDTModel.FacilityModel.AddressProofPath))
                                        {
                                            var addressindex = Model.PCPNDTModel.FacilityModel.AddressProofPath.LastIndexOf("/");
                                            var addressfileName = Model.PCPNDTModel.FacilityModel.AddressProofPath.Substring(addressindex + 1);
                                            @Html.ActionLink(addressfileName, "DownloadFile", "Generic",
                            new { Area = "", path = Model.PCPNDTModel.FacilityModel.AddressProofPath, downloadName = addressfileName },
                            null
                            );
                                        }

                                    </div>
                                    <div class="col-md-2">
                                        @Html.LabelFor(model => model.PCPNDTModel.FacilityModel.BuildingLayoutPath, new { @class = "control-label" })
                                    </div>
                                    <div class="col-md-2">
                                        @Html.TextBoxFor(model => model.PCPNDTModel.FacilityModel.BuildingLayoutPath, new { @class = "", type = "file", @style = "margin-left:-56%;", @id = "BuildingLayoutPath" })
                                        @if (!string.IsNullOrEmpty(Model.PCPNDTModel.FacilityModel.BuildingLayoutPath))
                                        {
                                            var layoutindex = Model.PCPNDTModel.FacilityModel.BuildingLayoutPath.LastIndexOf("/");
                                            var layoutfileName = Model.PCPNDTModel.FacilityModel.BuildingLayoutPath.Substring(layoutindex + 1);
                                            @Html.ActionLink(layoutfileName, "DownloadFile", "Generic",
 new { Area = "", path = Model.PCPNDTModel.FacilityModel.BuildingLayoutPath, downloadName = layoutfileName }, null);
                                        }

                                    </div>
                                </div>
                            </div>
                            <div class="row">
                                <div class="col-md-12 text-right">
                                    <input type="button" value="Clear" id="btnFacilityClear" class="btn btn-default" />
                                    <input type="button" value="Save" id="btnFacilitySave" class="btn btn-primary" />
                                </div>
                            </div>
                        </form>
                    }
                    else if (Model.FacilityAmendment == false)
                    {

                        <fieldset class="scheduler-border">
                            <legend class="scheduler-border">Facilities</legend>
                            <div class="row">
                                <div class="col-md-offset-1 col-md-3">
                                    @Html.CheckBox("facilitytype", new { @value = "1" }) Generic Counselling Center
                                </div>
                                <div class="col-md-3">
                                    @Html.CheckBox("facilitytype", new { @value = "2" }) Ultra Sound Clinic
                                </div>
                                <div class="col-md-4">
                                    @Html.CheckBox("facilitytype", new { @value = "3" }) Imaging Center
                                </div>
                            </div>
                            <div class="row">
                                <div class="col-md-offset-1 col-md-3">
                                    @Html.CheckBox("facilitytype", new { @value = "4" }) Genetic Clinic
                                </div>
                                <div class="col-md-3">
                                    @Html.CheckBox("facilitytype", new { @value = "5" }) Generic Laboratory
                                </div>
                                <div class="col-md-4">
                                    @Html.CheckBox("facilitytype", new { @value = "6" }) Assisted Reproductive Technology (ART)
                                </div>
                            </div>
                        </fieldset>
                        <div class="row">
                            <div class="col-md-1">
                                @Html.LabelFor(model => model.PCPNDTModel.FacilityModel.Name, new { @class = "control-label" })
                            </div>
                            <div class="col-md-3">
                                @Html.DisplayFor(model => model.PCPNDTModel.FacilityModel.Name)
                            </div>
                            <div class="col-md-1">
                                @Html.LabelFor(model => model.PCPNDTModel.FacilityModel.DistrictId, new { @class = "control-label" })
                            </div>
                            <div class="col-md-3">
                                @Html.DisplayFor(model => model.PCPNDTModel.FacilityModel.DistrictName)
                            </div>
                            <div class="col-md-1">
                                @Html.LabelFor(model => model.PCPNDTModel.FacilityModel.MandalId, new { @class = "control-label" })
                            </div>
                            <div class="col-md-3">
                                @Html.DisplayFor(model => model.PCPNDTModel.FacilityModel.MandalName)
                            </div>
                        </div>
                        <div class="row">
                            <div class="col-md-1">
                                @Html.LabelFor(model => model.PCPNDTModel.FacilityModel.VillageId, new { @class = "control-label" })
                            </div>
                            <div class="col-md-3">
                                @Html.DisplayFor(model => model.PCPNDTModel.FacilityModel.VillageName)
                            </div>
                            <div class="col-md-1">
                                @Html.LabelFor(model => model.PCPNDTModel.FacilityModel.HouseNumber, new { @class = "control-label" })
                            </div>
                            <div class="col-md-3">
                                @Html.DisplayFor(model => model.PCPNDTModel.FacilityModel.HouseNumber)
                            </div>
                            <div class="col-md-1">
                                @Html.LabelFor(model => model.PCPNDTModel.FacilityModel.StreetName, new { @class = "control-label" })
                            </div>
                            <div class="col-md-3">
                                @Html.DisplayFor(model => model.PCPNDTModel.FacilityModel.StreetName)
                            </div>
                        </div>
                        <div class="row">
                            <div class="col-md-1">
                                @Html.LabelFor(model => model.PCPNDTModel.FacilityModel.Phone, new { @class = "control-label" })
                            </div>
                            <div class="col-md-3">
                                @Html.DisplayFor(model => model.PCPNDTModel.FacilityModel.Phone)
                            </div>
                            <div class="col-md-1">
                                @Html.LabelFor(model => model.PCPNDTModel.FacilityModel.Email, new { @class = "control-label" })
                            </div>
                            <div class="col-md-3">
                                @Html.DisplayFor(model => model.PCPNDTModel.FacilityModel.Email)
                            </div>
                            <div class="col-md-1">
                                @Html.LabelFor(model => model.PCPNDTModel.FacilityModel.Fax, new { @class = "control-label" })
                            </div>
                            <div class="col-md-3">
                                @Html.DisplayFor(model => model.PCPNDTModel.FacilityModel.Fax)
                            </div>
                        </div>
                            <div class="row">
                                <div class="col-md-1">
                                    @Html.LabelFor(model => model.PCPNDTModel.FacilityModel.Telegraph, new { @class = "control-label" })
                                </div>
                                <div class="col-md-3">
                                    @Html.DisplayFor(model => model.PCPNDTModel.FacilityModel.Telegraph)
                                </div>
                                <div class="col-md-1">
                                    @Html.LabelFor(model => model.PCPNDTModel.FacilityModel.Telex, new { @class = "control-label" })
                                </div>
                                <div class="col-md-3">
                                    @Html.DisplayFor(model => model.PCPNDTModel.FacilityModel.Telex)
                                </div>
                                <div class="col-md-1">
                                    @Html.LabelFor(model => model.PCPNDTModel.FacilityModel.PINCode, new { @class = "control-label" })
                                </div>
                                <div class="col-md-3">
                                    @Html.DisplayFor(model => model.PCPNDTModel.FacilityModel.PINCode)
                                </div>
                            </div>

                    }

                </div>

                @*1st tab Facilities*@

                <div id="tabTests" class="tab-pane">
                    @if (Model.TestsProceduresAmendment == true)
                    {
                    <form id="formTests">
                        <div class="row">
                            <div class="col-md-offset-1 col-md-10">
                                Specific pre-natal diagnostic procedures/tests for which approval is sought
                            </div>
                        </div>
                        <fieldset class="scheduler-border" id="fsInvasive" hidden>
                            <legend class="scheduler-border">Invasive</legend>
                            <div class="row">
                                <div class="col-md-offset-1 col-md-3">
                                    @Html.HiddenFor(model => model.PCPNDTModel.TestsModel.Id)
                                    @Html.CheckBox("testinvasive", new { @value = "1" }) Amniocentesis
                                </div>
                                <div class="col-md-3">
                                    @Html.CheckBox("testinvasive", new { @value = "2" }) Biochemical
                                </div>
                                <div class="col-md-4">
                                    @Html.CheckBox("testinvasive", new { @value = "3" }) Chorionic Villi Aspiration
                                </div>
                            </div>
                            <div class="row">
                                <div class="col-md-offset-1 col-md-3">
                                    @Html.CheckBox("testinvasive", new { @value = "4" }) Molecular Studies
                                </div>
                                <div class="col-md-3">
                                    @Html.CheckBox("testinvasive", new { @value = "5" }) Chromosomal
                                </div>
                            </div>
                        </fieldset>
                        <fieldset class="scheduler-border" id="fsNonInvasive" hidden>
                            <legend class="scheduler-border">Non-Invasive</legend>
                            <div class="row">
                                <div class="col-md-offset-1 col-md-3">
                                    @Html.CheckBox("testnoninvasive", new { @value = "6" }) Ultra Sonography
                                </div>
                            </div>
                        </fieldset>
                        <fieldset class="scheduler-border" id="fsTestsRemarks" hidden>
                            <legend class="scheduler-border">Remarks</legend>
                            <div class="row">
                                <div class="col-md-offset-1 col-md-1">
                                    @Html.LabelFor(model => model.PCPNDTModel.TestsModel.Remarks, new { @class = "control-label" })
                                </div>
                                <div class="col-md-8">
                                    @Html.TextAreaFor(model => model.PCPNDTModel.TestsModel.Remarks, new { @class = "form-control" })
                                </div>
                            </div>
                        </fieldset>
                        <div class="row">
                            <div class="col-md-12 text-right">
                                <input type="button" value="Clear" id="btnTestClear" class="btn btn-default" />
                                <input type="button" value="Save" id="btnTestSave" class="btn btn-primary" />
                            </div>
                        </div>
                    </form>
                    }
                    else if (Model.TestsProceduresAmendment == false)
                    {
                    <form id="formTests">
                        @{
                                if (Model.PCPNDTModel.FacilityModel.Faclities != null)
                                {
                                    if (Model.PCPNDTModel.FacilityModel.Faclities.Contains("4") || Model.PCPNDTModel.FacilityModel.Faclities.Contains("5"))
                                    {
                            <fieldset class="scheduler-border">
                                <legend class="scheduler-border">Invasive</legend>
                                <div class="row">
                                    <div class="col-md-offset-1 col-md-3">
                                        @Html.HiddenFor(model => model.PCPNDTModel.TestsModel.Id)
                                        @Html.CheckBox("testinvasive", new { @value = "1" }) Amniocentesis
                                    </div>
                                    <div class="col-md-3">
                                        @Html.CheckBox("testinvasive", new { @value = "2" }) Biochemical
                                    </div>
                                    <div class="col-md-4">
                                        @Html.CheckBox("testinvasive", new { @value = "3" }) Chorionic Villi Aspiration
                                    </div>
                                </div>
                                <div class="row">
                                    <div class="col-md-offset-1 col-md-3">
                                        @Html.CheckBox("testinvasive", new { @value = "4" }) Molecular Studies
                                    </div>
                                    <div class="col-md-3">
                                        @Html.CheckBox("testinvasive", new { @value = "5" }) Chromosomal
                                    </div>
                                </div>
                            </fieldset>
                                    }
                                    if (Model.PCPNDTModel.FacilityModel.Faclities.Contains("2") || Model.PCPNDTModel.FacilityModel.Faclities.Contains("3")
                                        || Model.PCPNDTModel.FacilityModel.Faclities.Contains("4") || Model.PCPNDTModel.FacilityModel.Faclities.Contains("5"))
                                    {
                            <fieldset class="scheduler-border">
                                <legend class="scheduler-border">Non-Invasive</legend>
                                <div class="row">
                                    <div class="col-md-offset-1 col-md-3">
                                        @Html.CheckBox("testnoninvasive", new { @value = "1" }) Ultra Sonography
                                    </div>
                                </div>
                            </fieldset>
                                    }
                                    if (Model.PCPNDTModel.FacilityModel.Faclities.Contains("1") || Model.PCPNDTModel.FacilityModel.Faclities.Contains("6"))
                                    {
                            <fieldset class="scheduler-border" id="fsTestsRemarks">
                                <legend class="scheduler-border">Remarks</legend>
                                <div class="row">
                                    <div class="col-md-offset-1 col-md-1">
                                        @Html.LabelFor(model => model.PCPNDTModel.TestsModel.Remarks, new { @class = "control-label" })
                                    </div>
                                    <div class="col-md-8">
                                        @Html.DisplayFor(model => model.PCPNDTModel.TestsModel.Remarks)
                                    </div>
                                </div>
                            </fieldset>
                                    }
                                }
                        }
                    </form>
                                }
                </div>
                <!-- /.tab-pane -->
                <div class="tab-pane" id="tabEquipment">
                    @if (Model.EquipmentAmendment == true)
                    {
                    <form id="formEquipment">
                        @Html.HiddenFor(model => model.PCPNDTModel.EquipmentModel.Id)
                        <fieldset class="scheduler-border">
                            <legend class="scheduler-border">Equipment Details</legend>
                            <div class="row">
                                <div class="col-md-1">
                                    @Html.LabelFor(model => model.PCPNDTModel.EquipmentModel.Name, new { @class = "control-label" })
                                </div>
                                <div class="col-md-2">
                                    @Html.HiddenFor(model => model.PCPNDTModel.EquipmentModel.Id)
                                    @Html.TextBoxFor(model => model.PCPNDTModel.EquipmentModel.Name, new { @class = "form-control" })
                                    @Html.ValidationMessageFor(model => model.PCPNDTModel.EquipmentModel.Name, "", new { @class = "text-danger" })
                                </div>
                                <div class="col-md-1 text-right">
                                    @Html.LabelFor(model => model.PCPNDTModel.EquipmentModel.MachineModel, new { @class = "control-label" })
                                </div>
                                <div class="col-md-2">
                                    @Html.TextBoxFor(model => model.PCPNDTModel.EquipmentModel.MachineModel, new { @class = "form-control" })
                                    @Html.ValidationMessageFor(model => model.PCPNDTModel.EquipmentModel.MachineModel, "", new { @class = "text-danger" })
                                </div>
                                <div class="col-md-2 text-right">
                                    @Html.LabelFor(model => model.PCPNDTModel.EquipmentModel.SerialNumber, new { @class = "control-label" })
                                </div>
                                <div class="col-md-2">
                                    @Html.TextBoxFor(model => model.PCPNDTModel.EquipmentModel.SerialNumber, new { @class = "form-control" })
                                    @Html.ValidationMessageFor(model => model.PCPNDTModel.EquipmentModel.SerialNumber, "", new { @class = "text-danger" })
                                </div>

                            </div>
                            <div class="row">
                                <div class="col-md-1">
                                    @Html.LabelFor(model => model.PCPNDTModel.EquipmentModel.Make, new { @class = "control-label" })
                                </div>
                                <div class="col-md-2">
                                    @Html.TextBoxFor(model => model.PCPNDTModel.EquipmentModel.Make, new { @class = "form-control" })
                                    @Html.ValidationMessageFor(model => model.PCPNDTModel.EquipmentModel.Make, "", new { @class = "text-danger" })
                                </div>
                                <div class="col-md-1 text-right">
                                    @Html.LabelFor(model => model.PCPNDTModel.EquipmentModel.Type, new { @class = "control-label" })
                                </div>
                                <div class="col-md-2">
                                    @Html.TextBoxFor(model => model.PCPNDTModel.EquipmentModel.Type, new { @class = "form-control" })
                                    @Html.ValidationMessageFor(model => model.PCPNDTModel.EquipmentModel.Type, "", new { @class = "text-danger" })
                                </div>
                                <div class="col-md-2 text-right">
                                    @Html.LabelFor(model => model.PCPNDTModel.EquipmentModel.UploadedFilePath, new { @class = "control-label" })
                                </div>
                                <div class="col-md-2">
                                    @Html.TextBoxFor(model => model.PCPNDTModel.EquipmentModel.UploadedFilePath, new { @type = "file" })
                                    @Html.ValidationMessageFor(model => model.PCPNDTModel.EquipmentModel.UploadedFilePath, "", new { @class = "text-danger" })
                                </div>
                                <div class="col-md-2 text-right">
                                    <input type="button" value="Add" id="btnAddEquipment" class="btn btn-default" />
                                </div>
                            </div>
                        </fieldset>
                    </form>
                    <fieldset class="scheduler-border">
                        <legend class="scheduler-border">Equipment List</legend>
                        <div class="row">
                            <div class="col-xs-12">
                                <div class="box">
                                    <div class="box-body table-responsive no-padding">
                                        <table id="tblEquiments" class="table table-hover">
                                            <tr>
                                                <th>S.No.</th>
                                                <th>Name</th>
                                                <th>Serial No.</th>
                                                <th>Model</th>
                                                <th>Make</th>
                                                <th>Type</th>
                                                <th>Uploaded File</th>
                                                <th>Status</th>
                                                <th></th>
                                            </tr>
                                            @if (Model.PCPNDTModel.EquipmentList != null)
                                                {
                                                    for (int i = 0; i < Model.PCPNDTModel.EquipmentList.Count; i++)
                                                    {
                                                <tr>
                                                    <td>@Convert.ToInt32(i + 1)</td>
                                                    <td>@Model.PCPNDTModel.EquipmentList[i].Name</td>
                                                    <td>@Model.PCPNDTModel.EquipmentList[i].SerialNumber</td>
                                                    <td>@Model.PCPNDTModel.EquipmentList[i].MachineModel</td>
                                                    <td>@Model.PCPNDTModel.EquipmentList[i].Make</td>
                                                    <td>@Model.PCPNDTModel.EquipmentList[i].Type</td>
                                                    <td>
                                                        @if (Model.PCPNDTModel.EquipmentList[i].UploadedFilePath != null)
                                                                {
                                                                    var layoutindex = Model.PCPNDTModel.EquipmentList[i].UploadedFilePath.LastIndexOf("/");
                                                                    var layoutfileName = Model.PCPNDTModel.EquipmentList[i].UploadedFilePath.Substring(layoutindex + 1);
                                                                @Html.ActionLink(layoutfileName, "DownloadFile", "Generic",
                                                                 new { Area = "", path = Model.PCPNDTModel.EquipmentList[i].UploadedFilePath, downloadName = layoutfileName }, null);
                                                                }
                                                    </td>
                                                    @if (@Model.PCPNDTModel.EquipmentList[i].Id != 0)
                                                            {
                                                            <td>Existing</td>
                                                            <td><input type='button' value='Delete' onclick='DeleteEquipment(@i);' /></td>
                                                            }
                                                            else if (@Model.PCPNDTModel.EquipmentList[i].Id == 0)
                                                            {
                                                            <td>New</td>
                                                            <td><input type='button' value='Delete' onclick='DeleteEquipment(@i);' /></td>
                                                            }
                                                            else if (@Model.PCPNDTModel.EquipmentList[i].Id != 0 && @Model.PCPNDTModel.EquipmentList[i].IsDeleted == true)
                                                            {
                                                            <td>Deleted</td>

                                                            }
                                                </tr>
                                                    }
                                                }

                                        </table>
                                    </div>
                                    <!-- /.box-body -->
                                </div>
                                <!-- /.box -->
                            </div>
                        </div>
                    </fieldset>
                    <div class="row">
                        <div class="col-md-12 text-right">
                            <input type="button" value="Clear" id="btnEquipmentClear" class="btn btn-default" />
                            <input type="button" value="Save" id="btnEquipmentSave" class="btn btn-primary" />
                        </div>
                    </div>
                    }
                    else if (Model.EquipmentAmendment == false)
                    {
                    <div class="tab-pane" id="tabEquipment">
                        <fieldset class="scheduler-border">
                            <legend class="scheduler-border">Equipment List</legend>
                            <div class="row">
                                <div class="col-xs-12">
                                    <div class="box">
                                        <div class="box-body table-responsive no-padding">
                                            <table id="tblEquiments" class="table table-hover">
                                                <tr>
                                                    <th>S.No.</th>
                                                    <th>Name</th>
                                                    <th>Serial No.</th>
                                                    <th>Model</th>
                                                    <th>Make</th>
                                                    <th>Type</th>
                                                    <th>Uploaded File</th>
                                                </tr>
                                                @if (Model.PCPNDTModel.EquipmentList != null)
                                                    {
                                                        for (int i = 0; i < Model.PCPNDTModel.EquipmentList.Count; i++)
                                                        {
                                                    <tr>
                                                        <td>@Convert.ToInt32(i + 1)</td>
                                                        <td>@Model.PCPNDTModel.EquipmentList[i].Name</td>
                                                        <td>@Model.PCPNDTModel.EquipmentList[i].SerialNumber</td>
                                                        <td>@Model.PCPNDTModel.EquipmentList[i].MachineModel</td>
                                                        <td>@Model.PCPNDTModel.EquipmentList[i].Make</td>
                                                        <td>@Model.PCPNDTModel.EquipmentList[i].Type</td>
                                                        <td>
                                                            @if (Model.PCPNDTModel.EquipmentList[i].UploadedFilePath != null)
                                                                    {
                                                                        var layoutindex = Model.PCPNDTModel.EquipmentList[i].UploadedFilePath.LastIndexOf("/");
                                                                        var layoutfileName = Model.PCPNDTModel.EquipmentList[i].UploadedFilePath.Substring(layoutindex + 1);
                                                                    @Html.ActionLink(layoutfileName, "DownloadFile", "Generic",
                                                                        new { Area = "", path = Model.PCPNDTModel.EquipmentList[i].UploadedFilePath, downloadName = layoutfileName }, null);
                                                                    }
                                                        </td>

                                                    </tr>
                                                        }
                                                    }

                                            </table>
                                        </div>
                                        <!-- /.box-body -->
                                    </div>
                                    <!-- /.box -->
                                </div>
                            </div>
                        </fieldset>
                    </div>
                    }
                    <div class="row">
                        <div class="col-md-12 text-right">
                            @*<input type="button" value="Clear" id="btnEquipmentClear" class="btn btn-default" />
                        <input type="button" value="Save" id="btnEquipmentSave" class="btn btn-primary" />*@
                        </div>
                    </div>
                </div>
                <!-- /.tab-pane -->
                <div id="tabFacilities" class="tab-pane">
                    @if (Model.FacilitiesAmendment == true)
                    {
                    <form id="formFacilities">
                        @Html.HiddenFor(model => model.PCPNDTModel.FacilitiesModel.Id)
                        <div class="row">
                            <div class="col-md-offset-1 col-md-10">
                                Facilities that are or would be available in the Laboratory/Clinic for the following tests:
                            </div>
                        </div>
                        <fieldset class="scheduler-border" id="fsTests" hidden>
                            <legend class="scheduler-border">Tests</legend>
                            <div class="row">
                                <div class="col-md-offset-1 col-md-3">
                                    @Html.CheckBox("facilitytest", new { @value = "1" }) Amniocentesis
                                </div>
                                <div class="col-md-3">
                                    @Html.CheckBox("facilitytest", new { @value = "2" }) Ultra Sound
                                </div>
                                <div class="col-md-4">
                                    @Html.CheckBox("facilitytest", new { @value = "3" }) Chorionic Villi Aspiration
                                </div>
                            </div>
                            <div class="row">
                                <div class="col-md-offset-1 col-md-3">
                                    @Html.CheckBox("facilitytest", new { @value = "4" }) Foetal Biopsy
                                </div>
                                <div class="col-md-3">
                                    @Html.CheckBox("facilitytest", new { @value = "5" }) Foetoscopy
                                </div>
                                <div class="col-md-4">
                                    @Html.CheckBox("facilitytest", new { @value = "6" }) Cordocentesis
                                </div>
                            </div>
                        </fieldset>
                        <fieldset class="scheduler-border" id="fsStudies" hidden>
                            <legend class="scheduler-border">Studies</legend>
                            <div class="row">
                                <div class="col-md-offset-1 col-md-3">
                                    @Html.CheckBox("facilitystudies", new { @value = "7" }) Chromosomal Studies
                                </div>
                                <div class="col-md-3">
                                    @Html.CheckBox("facilitystudies", new { @value = "8" }) Biochemical Studies
                                </div>
                                <div class="col-md-4">
                                    @Html.CheckBox("facilitystudies", new { @value = "9" }) Molecular Studies
                                </div>
                            </div>
                            <div class="row">
                                <div class="col-md-offset-1 col-md-3">
                                    @Html.CheckBox("facilitystudies", new { @value = "10" }) Preemplantatioin Genetic
                                </div>
                            </div>
                        </fieldset>
                        <fieldset class="scheduler-border" id="fsFacilityRemarks" hidden>
                            <legend class="scheduler-border">Remarks</legend>
                            <div class="row">
                                <div class="col-md-offset-1 col-md-1">
                                    @Html.LabelFor(model => model.PCPNDTModel.FacilitiesModel.Remarks, new { @class = "control-label" })
                                </div>
                                <div class="col-md-6">
                                    @Html.TextAreaFor(model => model.PCPNDTModel.FacilitiesModel.Remarks, new { @class = "form-control" })
                                </div>
                            </div>
                        </fieldset>
                        <div class="row">
                            <div class="col-md-12 text-right">
                                <input type="button" value="Clear" id="btnFacilitiesClear" class="btn btn-default" />
                                <input type="button" value="Save" id="btnFacilicitesSave" class="btn btn-primary" />
                            </div>
                        </div>
                    </form>
                    }
                    else if (Model.FacilitiesAmendment == false)
                    {
                    <form id="formFacilities">
                        @{
                                if (Model.PCPNDTModel.FacilityModel.Faclities != null)
                                {
                                    if (Model.PCPNDTModel.FacilityModel.Faclities.Contains("4") || Model.PCPNDTModel.FacilityModel.Faclities.Contains("5"))
                                    {
                            <fieldset class="scheduler-border">
                                <legend class="scheduler-border">Tests</legend>
                                <div class="row">
                                    <div class="col-md-offset-1 col-md-3">
                                        @Html.CheckBox("facilitytest", new { @value = "1" }) Amniocentesis
                                    </div>
                                    <div class="col-md-3">
                                        @Html.CheckBox("facilitytest", new { @value = "2" }) Ultra Sound
                                    </div>
                                    <div class="col-md-4">
                                        @Html.CheckBox("facilitytest", new { @value = "3" }) Chorionic Villi Aspiration
                                    </div>
                                </div>
                                <div class="row">
                                    <div class="col-md-offset-1 col-md-3">
                                        @Html.CheckBox("facilitytest", new { @value = "4" }) Foetal Biopsy
                                    </div>
                                    <div class="col-md-3">
                                        @Html.CheckBox("facilitytest", new { @value = "5" }) Foetoscopy
                                    </div>
                                    <div class="col-md-4">
                                        @Html.CheckBox("facilitytest", new { @value = "6" }) Cordocentesis
                                    </div>
                                </div>
                            </fieldset>
                            <fieldset class="scheduler-border">
                                <legend class="scheduler-border">Studies</legend>
                                <div class="row">
                                    <div class="col-md-offset-1 col-md-3">
                                        @Html.CheckBox("facilitystudies", new { @value = "1" }) Chromosomal Studies
                                    </div>
                                    <div class="col-md-3">
                                        @Html.CheckBox("facilitystudies", new { @value = "2" }) Biochemical Studies
                                    </div>
                                    <div class="col-md-4">
                                        @Html.CheckBox("facilitystudies", new { @value = "3" }) Molecular Studies
                                    </div>
                                </div>
                                <div class="row">
                                    <div class="col-md-offset-1 col-md-3">
                                        @Html.CheckBox("facilitystudies", new { @value = "4" }) Preemplantatioin Genetic
                                    </div>
                                </div>
                            </fieldset>
                                    }
                                    if (Model.PCPNDTModel.FacilityModel.Faclities.Contains("1") || Model.PCPNDTModel.FacilityModel.Faclities.Contains("2")
                                        || Model.PCPNDTModel.FacilityModel.Faclities.Contains("3") || Model.PCPNDTModel.FacilityModel.Faclities.Contains("6"))
                                    {
                            <fieldset class="scheduler-border" id="fsFacilityRemarks">
                                <legend class="scheduler-border">Remarks</legend>
                                <div class="row">
                                    <div class="col-md-offset-1 col-md-1">
                                        @Html.LabelFor(model => model.PCPNDTModel.FacilitiesModel.Remarks, new { @class = "control-label" })
                                    </div>
                                    <div class="col-md-6">
                                        @Html.DisplayFor(model => model.PCPNDTModel.FacilitiesModel.Remarks)
                                    </div>
                                </div>
                            </fieldset>
                                    }
                                }
                        }
                    </form>
                                }
                </div>

                <div id="tabEmployee" class="tab-pane">
                    @if (Model.EmployeesAmendment == true)
                    {
                    <form id="formEmployee">
                        @Html.HiddenFor(model => model.PCPNDTModel.EmployeeModel.Id)

                        <fieldset class="scheduler-border">
                            <legend class="scheduler-border">Employee Details</legend>
                            <div class="row">
                                <div class="col-md-1">
                                    @Html.LabelFor(model => model.PCPNDTModel.EmployeeModel.Name, new { @class = "control-label" })
                                </div>
                                <div class="col-md-2">
                                    @Html.HiddenFor(model => model.PCPNDTModel.EmployeeModel.Id)
                                    @Html.TextBoxFor(model => model.PCPNDTModel.EmployeeModel.Name, new { @class = "form-control" })
                                    @Html.ValidationMessageFor(model => model.PCPNDTModel.EmployeeModel.Name, "", new { @class = "text-danger" })
                                </div>
                                <div class="col-md-2 text-right">
                                    @Html.LabelFor(model => model.PCPNDTModel.EmployeeModel.DesignationId, new { @class = "control-label" })
                                </div>
                                <div class="col-md-2">
                                    @Html.DropDownListFor(model => model.PCPNDTModel.EmployeeModel.DesignationId,
                                new SelectList(TempData.Peek("DoctorSpecialityList") as List<Medical.Models.DoctorSpecialityModel>, "Id", "Name"), "Select Designation",
                                new { @class = "form-control select2", @style = "width:100%;" })
                                    @*@Html.TextBoxFor(model => model.EmployeeModel.Designation, new { @class = "form-control" })*@
                                    @Html.ValidationMessageFor(model => model.PCPNDTModel.EmployeeModel.DesignationId, "", new { @class = "text-danger" })
                                </div>
                                <div class="col-md-1">
                                    @Html.LabelFor(model => model.PCPNDTModel.EmployeeModel.Experience, new { @class = "control-label" })
                                </div>
                                <div class="col-md-2">
                                    @Html.TextBoxFor(model => model.PCPNDTModel.EmployeeModel.Experience, new { @class = "form-control numeric" })
                                    @Html.ValidationMessageFor(model => model.PCPNDTModel.EmployeeModel.Experience, "", new { @class = "text-danger" })
                                </div>
                            </div>
                            <div class="row">
                                <div class="col-md-1">
                                    @Html.LabelFor(model => model.PCPNDTModel.EmployeeModel.RegistrationNumber, new { @class = "control-label" })
                                </div>
                                <div class="col-md-2">
                                    @Html.TextBoxFor(model => model.PCPNDTModel.EmployeeModel.RegistrationNumber, new { @class = "form-control" })
                                    @Html.ValidationMessageFor(model => model.PCPNDTModel.EmployeeModel.RegistrationNumber, "", new { @class = "text-danger" })
                                </div>
                                <div class="col-md-2 text-right">
                                    @Html.LabelFor(model => model.PCPNDTModel.EmployeeModel.UploadedFilePath, new { @class = "control-label" })
                                </div>
                                <div class="col-md-2">
                                    @Html.TextBoxFor(model => model.PCPNDTModel.EmployeeModel.UploadedFilePath, new { @type = "file" })
                                    @Html.ValidationMessageFor(model => model.PCPNDTModel.EmployeeModel.UploadedFilePath, "", new { @class = "text-danger" })
                                </div>
                                <div class="col-md-offset-3 col-md-3 text-right">
                                    <input type="button" value="Add" id="btnAddEmployee" class="btn btn-default" />
                                </div>
                            </div>
                        </fieldset>
                    </form>
                    <fieldset class="scheduler-border">
                        <legend class="scheduler-border">Employee List</legend>
                        <div class="row">
                            <div class="col-xs-12">
                                <div class="box">
                                    <div class="box-body table-responsive no-padding">
                                        <table id="tblEmployees" class="table table-hover">
                                            <tr>
                                                <th>S.No.</th>
                                                <th>Name</th>
                                                <th>Designation</th>
                                                <th>Experience</th>
                                                <th>Registration Number</th>
                                                <th>Uploaded File</th>
                                                <th>Status</th>
                                                <th></th>
                                            </tr>
                                            @if (Model.PCPNDTModel.EmployeeList != null)
                                                {
                                                    for (int i = 0; i < Model.PCPNDTModel.EmployeeList.Count; i++)
                                                    {
                                                <tr>
                                                    <td> @Convert.ToInt32(@i + 1)</td>
                                                    <td>@Model.PCPNDTModel.EmployeeList[i].Name</td>
                                                    <td>@Model.PCPNDTModel.EmployeeList[i].DesignationName</td>
                                                    <td>@Model.PCPNDTModel.EmployeeList[i].Experience</td>
                                                    <td>@Model.PCPNDTModel.EmployeeList[i].RegistrationNumber</td>
                                                    <td>
                                                        @if (Model.PCPNDTModel.EmployeeList[i].UploadedFilePath != null)
                                                                {
                                                                    var addressindex = Model.PCPNDTModel.EmployeeList[i].UploadedFilePath.LastIndexOf("/");
                                                                    var addressfileName = Model.PCPNDTModel.EmployeeList[i].UploadedFilePath.Substring(addressindex + 1);
                                                                @Html.ActionLink(addressfileName, "DownloadFile", "Generic",
                            new { Area = "", path = Model.PCPNDTModel.EmployeeList[i].UploadedFilePath, downloadName = addressfileName }, null);
                                                                }
                                                    </td>
                                                    @if (@Model.PCPNDTModel.EmployeeList[i].Id != 0)
                                                            {
                                                            <td>Existing</td>
                                                            <td><input type='button' value='Delete' onclick='DeleteEmployee(@i);' /></td>
                                                            }
                                                            else if (@Model.PCPNDTModel.EmployeeList[i].Id == 0)
                                                            {
                                                            <td>New</td>
                                                            <td><input type='button' value='Delete' onclick='DeleteEmployee(@i);' /></td>
                                                            }
                                                            else if (@Model.PCPNDTModel.EmployeeList[i].Id != 0 && @Model.PCPNDTModel.EmployeeList[i].IsDeleted == true)
                                                            {
                                                            <td>Deleted</td>
                                                            }
                                                </tr>
                                                    }
                                                }
                                        </table>
                                    </div>
                                    <!-- /.box-body -->
                                </div>
                                <!-- /.box -->
                            </div>
                        </div>
                    </fieldset>
                    <div class="row">
                        <div class="col-md-12 text-right">
                            <input type="button" value="Clear" id="btnEmployeeClear" class="btn btn-default" />
                            <input type="button" value="Save" id="btnEmployeeSave" class="btn btn-primary" />
                        </div>
                    </div>
                    }
                    else if (Model.EmployeesAmendment == false)
                    {
                    <fieldset class="scheduler-border">
                        <legend class="scheduler-border">Employee List</legend>
                        <div class="row">
                            <div class="col-xs-12">
                                <div class="box">
                                    <div class="box-body table-responsive no-padding">
                                        <table id="tblEmployees" class="table table-hover">
                                            <tr>
                                                <th>S.No.</th>
                                                <th>Name</th>
                                                <th>Designation</th>
                                                <th>Experience</th>
                                                <th>Registration Number</th>
                                                <th>Uploaded File</th>
                                                <th></th>
                                            </tr>
                                            @if (Model.PCPNDTModel.EmployeeList != null)
                                                {
                                                    for (int i = 0; i < Model.PCPNDTModel.EmployeeList.Count; i++)
                                                    {
                                                <tr>
                                                    <td> @Convert.ToInt32(@i + 1)</td>
                                                    <td>@Model.PCPNDTModel.EmployeeList[i].Name</td>
                                                    <td>@Model.PCPNDTModel.EmployeeList[i].DesignationName</td>
                                                    <td>@Model.PCPNDTModel.EmployeeList[i].Experience</td>
                                                    <td>@Model.PCPNDTModel.EmployeeList[i].RegistrationNumber</td>
                                                    <td>
                                                        @if (Model.PCPNDTModel.EmployeeList[i].UploadedFilePath != null)
                                                                {
                                                                    var addressindex = Model.PCPNDTModel.EmployeeList[i].UploadedFilePath.LastIndexOf("/");
                                                                    var addressfileName = Model.PCPNDTModel.EmployeeList[i].UploadedFilePath.Substring(addressindex + 1);
                                                                @Html.ActionLink(addressfileName, "DownloadFile", "Generic",
                                         new { Area = "", path = Model.PCPNDTModel.EmployeeList[i].UploadedFilePath, downloadName = addressfileName }, null);
                                                                }
                                                    </td>
                                                </tr>
                                                    }
                                                }
                                        </table>
                                    </div>
                                    <!-- /.box-body -->
                                </div>
                                <!-- /.box -->
                            </div>
                        </div>
                    </fieldset>
                    }

                </div>

                <div id="tabOwnership" class="tab-pane">
                    @*@if (Model.InstitutionAmendment == true)
                {*@
                    <form id="formOwnership">
                        <div class="row">
                            @if (Model.OwnershipTypeAmendment == true)
                            {
                            <div class="col-md-1">
                                @Html.HiddenFor(model => model.PCPNDTModel.InstitutionModel.Id)
                                @Html.LabelFor(model => model.PCPNDTModel.InstitutionModel.OwnershipTypeId, new { @class = "control-label" })
                            </div>
                            <div class="col-md-3">
                                @Html.DropDownListFor(model => model.PCPNDTModel.InstitutionModel.OwnershipTypeId,
      new SelectList(ViewBag.OwnershipTypeList, "Id", "Name"), "Select Ownership",
       new { @class = "form-control select2", @style = "Width:100%;" })
                                @Html.ValidationMessageFor(model => model.PCPNDTModel.InstitutionModel.OwnershipTypeId, "", new { @class = "text-danger" })
                            </div>

                            }
                            else if (Model.OwnershipTypeAmendment == false)
                            {
                            <div class="col-md-1">
                                @Html.LabelFor(model => model.PCPNDTModel.InstitutionModel.OwnershipTypeId, new { @class = "control-label" })
                            </div>
                            <div class="col-md-3">
                                @Html.DisplayFor(model => model.PCPNDTModel.InstitutionModel.OwnershipTypeName)
                            </div>

                            }

                            @if (Model.InstitutionAmendment == true)
                            {
                            <div class="col-md-1">
                                @Html.LabelFor(model => model.PCPNDTModel.InstitutionModel.InstitutionTypeId, new { @class = "control-label" })
                            </div>
                            <div class="col-md-3">
                                @Html.DropDownListFor(model => model.PCPNDTModel.InstitutionModel.InstitutionTypeId,
               new SelectList(ViewBag.InstitutionTypeList, "Id", "Name"), "Select Institution Type",
                new { @class = "form-control select2", @style = "Width:100%;" })
                                @Html.ValidationMessageFor(model => model.PCPNDTModel.InstitutionModel.InstitutionTypeId, "", new { @class = "text-danger" })
                            </div>
                            <div class="col-md-2 text-right">
                                @Html.LabelFor(model => model.PCPNDTModel.InstitutionModel.TotalWorkArea, new { @class = "control-label" })
                            </div>
                            <div class="col-md-2">
                                @Html.TextBoxFor(model => model.PCPNDTModel.InstitutionModel.TotalWorkArea, new { @readonly = "readonly", @class = "form-control numeric" })
                                @Html.ValidationMessageFor(model => model.PCPNDTModel.InstitutionModel.TotalWorkArea, "", new { @class = "text-danger" })
                            </div>

                            }
                            else if (Model.InstitutionAmendment == false)
                            {
                            <div class="col-md-1">
                                @Html.LabelFor(model => model.PCPNDTModel.InstitutionModel.InstitutionTypeId, new { @class = "control-label" })
                            </div>
                            <div class="col-md-3">
                                @Html.DisplayFor(model => model.PCPNDTModel.InstitutionModel.InstitutionTypeName)
                            </div>
                            <div class="col-md-2 text-right">
                                @Html.LabelFor(model => model.PCPNDTModel.InstitutionModel.TotalWorkArea, new { @class = "control-label" })
                            </div>
                            <div class="col-md-2">
                                @Html.TextBoxFor(model => model.PCPNDTModel.InstitutionModel.TotalWorkArea, new { @readonly = "readonly", @class = "form-control numeric" })
                                @Html.ValidationMessageFor(model => model.PCPNDTModel.InstitutionModel.TotalWorkArea, "", new { @class = "text-danger" })
                            </div>
                            }
                        </div>
                        @if (Model.OwnershipTypeAmendment == true)
                        {
                        <div class="row" id="divOwnershipUploads" hidden>
                            <div class="col-md-12">
                                <fieldset class="scheduler-border">
                                    <legend class="scheduler-border">File Uploads</legend>
                                    <div class="row" id="divAffidavitFile">
                                        <div class="col-md-offset-1 col-md-3">
                                            Affidavit
                                        </div>
                                        <div class="col-md-4">
                                            @Html.TextBox("affidavitFile", null, new { @type = "file" })
                                            @if (!string.IsNullOrEmpty(Model.PCPNDTModel.InstitutionModel.AffidavitDocPath))
                                                {
                                                    var index = Model.PCPNDTModel.InstitutionModel.AffidavitDocPath.LastIndexOf("/");
                                                    var fileName = Model.PCPNDTModel.InstitutionModel.AffidavitDocPath.Substring(index + 1);
                                                @Html.ActionLink(fileName, "DownloadFile", "Generic",
                                                    new { Area = "", path = Model.PCPNDTModel.InstitutionModel.AffidavitDocPath, downloadName = fileName },
                                                    null
                                                    );
                                                }
                                        </div>
                                    </div>
                                    <div class="row" id="divAssociationFile">
                                        <div class="col-md-offset-1 col-md-3">
                                            <span id="spanArticlesofAssociation">Articles of Association</span>
                                        </div>
                                        <div class="col-md-4">
                                            @Html.TextBox("articlesofAssociationFile", null, new { @type = "file" })
                                            @if (!string.IsNullOrEmpty(Model.PCPNDTModel.InstitutionModel.ArticleDocPath))
                                                {
                                                    var index = Model.PCPNDTModel.InstitutionModel.ArticleDocPath.LastIndexOf("/");
                                                    var fileName = Model.PCPNDTModel.InstitutionModel.ArticleDocPath.Substring(index + 1);
                                                @Html.ActionLink(fileName, "DownloadFile", "Generic",
                                                    new { Area = "", path = Model.PCPNDTModel.InstitutionModel.ArticleDocPath, downloadName = fileName },
                                                    null
                                                    );
                                                }
                                        </div>
                                    </div>
                                    <div class="row" id="divStudyCertificateFiles">
                                        <div class="col-md-offset-1 col-md-3">
                                            Study Certificate
                                        </div>
                                        <div class="col-md-4">
                                            @Html.TextBox("StudyCertificateFile", null, new { @type = "file", @multiple = "multiple" })
                                        </div>
                                    </div>
                                    <div class="row" id="divStudyCertificatesList">
                                        <div class="col-md-offset-1 col-md-10">
                                            <table id="tblStudyCertificates">
                                                <tr>
                                                    <th>S.No.</th>
                                                    <th>Document</th>
                                                    <th>Status</th>
                                                    <th></th>
                                                </tr>
                                                <tbody></tbody>
                                            </table>
                                        </div>
                                    </div>
                                </fieldset>
                            </div>
                        </div>
                        }
                        <div class="row">
                            <div class="col-md-12 text-right">
                                <input type="button" value="Clear" id="btnInstitutionClear" class="btn btn-default" />
                                <input type="button" value="Save" id="btnInstitutionSave" class="btn btn-primary" />
                            </div>
                        </div>
                    </form>
                    @*}*@

                </div>

                <div id="tabDeclaration" class="tab-pane">
                    <form id="formDeclaration">
                        <div class="row">
                            <div class="col-md-offset-1 col-md-10">
                                <p style="text-indent: 50px; text-align:justify;line-height: 30px;">
                                    I, Sh./Smt./Kum./Dr. <b>@Model.PCPNDTModel.DeclarationModel.Name</b> Son/Daughter/Wife of
                                    <b>@Model.PCPNDTModel.DeclarationModel.SonOf</b> aged <b>@Model.PCPNDTModel.DeclarationModel.Age years</b>
                                    resident of <b>@Model.PCPNDTModel.DeclarationModel.ResidentOf</b> working as (indicate designation)
                                    <b>@Model.PCPNDTModel.DeclarationModel.Designation</b> in (indicate name of the organization to be registered)
                                    <b>@Model.PCPNDTModel.DeclarationModel.Organization</b> hereby declare that I have read and understood the
                                    prenatal Diagnostic techniques (Regulation and Prevention of Miuse) Act, 1994 (57 of 1994) and
                                    Pre Natal Diagnostic Techniques (Regulation and Prevention of Miuse) Rules, 1996.
                                </p>
                                <p style="text-indent: 50px; text-align:justify;line-height: 30px;">
                                    I also undertake to explain the said Act and Rules to all employees of the Genetic Counselling Center / Genetic
                                    Laboratory / Generic Clinic / Ultrasound Clinic / Imaging Center in respect of which registration
                                    is sought and to ensure that act and Rules are fully compiled with.
                                </p>
                            </div>
                        </div>
                        <div class="row">
                            <div class="col-md-1">
                                Date
                            </div>
                            <div class="col-md-2">
                                <b>@Model.PCPNDTModel.DeclarationModel.Date.ToString("dd-MM-yyyy")</b>
                            </div>
                        </div>
                        <div class="row">
                            <div class="col-md-1">
                                Place
                            </div>
                            <div class="col-md-2">
                                <b>@Model.PCPNDTModel.DeclarationModel.Place</b>
                            </div>
                            <div class="col-md-offset-5 col-md-4" style="text-align:center">
                                <b>@Model.PCPNDTModel.DeclarationModel.Signature</b>
                                <br />
                                Name, Designation and Signature of the<br />
                                person who conduct the scanning
                            </div>
                        </div>
                    </form>
                </div>

                <div id="tabLicenseCancel" class="tab-pane">
                    <form id="formLicenseCancel">
                        <div class="row">
                            <div class="col-md-offset-1 col-md-1">
                                @Html.LabelFor(model => model.PCPNDTModel.cancelLiceseModel.LicenseNo ,"License#",new { @class = "control-label" })
                            </div>
                            <div class="col-md-3">
                                @Html.TextBoxFor(model => model.PCPNDTModel.cancelLiceseModel.LicenseNo, new { @class = "control-label" })
                            </div>
                            <div class="col-md-1 ">
                                <input type="button" value="Search" id="btnLicenseSearch" class="btn btn-default" />
                            </div>
                        </div>
                        @*<div class="row">
                            <div class="col-md-1">
                                @Html.LabelFor(model => model.PCPNDTModel.cancelLiceseModel.ApplicantName, new { @class = "control-label" })
                            </div>
                            <div class="col-md-3">
                                @Html.DisplayFor(model => model.PCPNDTModel.cancelLiceseModel.ApplicantName)
                            </div>
                            </div>*@
                        <div class="row">
                            <div class="col-md-offset-1 col-md-2">
                                @Html.LabelFor(model => model.PCPNDTModel.cancelLiceseModel.LicenseNo,"License No", new { @class = "control-label" })
                            </div>
                            <div class="col-md-3">
                            
                                @Html.LabelFor(model => model.PCPNDTModel.cancelLiceseModel.LicenseNo, new { @class = "control-label",@id="lblLicenseNo" })
                               
                            </div>
                            </div>
                        <div class="row">
                            <div class="col-md-offset-1 col-md-2">
                                @Html.LabelFor(model => model.PCPNDTModel.cancelLiceseModel.IsseuDate, "Issue Date", new { @class = "control-label" })
                            </div>
                            <div class="col-md-3">
                                @Html.LabelFor(model => model.PCPNDTModel.cancelLiceseModel.IsseuDate, new { @class = "control-label", @id = "lblIsseuDate" })
                            </div>
                           
                        </div>
                        <div class="row">
                            <div class="col-md-offset-1 col-md-2">
                                @Html.LabelFor(model => model.PCPNDTModel.cancelLiceseModel.ExpireDate, "Expire Date", new { @class = "control-label" })
                            </div>
                            <div class="col-md-3">
                                @Html.LabelFor(model => model.PCPNDTModel.cancelLiceseModel.ExpireDate, new { @class = "control-label", @id = "lblExpireDate" })
                            </div>
                        </div>
                        <div class="row">
                            <div class="col-md-offset-3 col-md-3 text-right">
                               
                                <input type="button" value="Cancel My License" id="btnLicenseCancel" class="btn btn-primary" />
                            </div>
                        </div>
                        </form>
                    </div>
                </div>
               
                        <!-- /.tab-content -->
                </div>
                <!-- nav-tabs-custom -->
            </div>
    <!-- /.col -->

</div>
<script>


    @*$(document).ready(function () {
        $('#tabApplicant input').attr("readonly", "readonly");
        $('#tabFacility input').attr("readonly", "readonly");

        var facilitytabValue =@ViewBag.FacilityTab;
        if(facilitytabValue == true)  {  $('#tabFacility').addClass("active");  }
        else{ console.log('test fail');   }
         
        var employeetabValue = @ViewBag.EmployeeTab;
        if(employeetabValue == true)  { $('#tabEmployee').addClass("active");   }
        else {  $('#tabEmployee *').prop('disabled',true);      }

        var equipmenttabValue = @ViewBag.EquipmentsTab;
        if(equipmenttabValue == true)  { $('#tabEquipment').addClass("active");  }
        else  {   $('#tabEquipment *').prop('disabled',true);   }

        var inistutionValue = @ViewBag.InistutionsTab;
        if(inistutionValue == true)  {  $('#tabOwnership').addClass("active");  }
        else {  $('#tabOwnership *').prop('disabled',true);    }

        var facilityAvailableValue = @ViewBag.FacilitiesAvailableTab;
        if(facilityAvailableValue == true)  {  $('#tabFacilities').addClass("active");  }
        else {  $('#tabFacilities *').prop('disabled',true);    }

    });*@


    $("#lblLicenseNo").text('');
    $('#lblIsseuDate').text('');
    $('#lblExpireDate').text('');

    $('#btnFacilitySave').on('click', function (e) {
       
        e.preventDefault();
        var facilities = [];
        $.each($("input[name='facilitytype']"), function () {
            if ($(this).parent('[class*="icheckbox"]').hasClass("checked"))
                facilities.push(this.value);
        });

        if (facilities.length == 0) {
            alert('Please select at least one Facility');
            return false;
        }

       // if ($('#formFacility').valid()) {

            var url = '@Url.Action("SaveFacilityAmendment", "Amendment", new { Area = "User" })';


            // New Code
            // Checking whether FormData is available in browser
            if (window.FormData !== undefined) {
                var addressProof = $("#AddressProofPath").get(0).files[0];
                var buildingLayout = $("#BuildingLayoutPath").get(0).files[0];

                // Create FormData object
                var fileData = new FormData();

                fileData.append('AddressProof', addressProof);
                fileData.append('BuildingLayout', buildingLayout);
                fileData.append('Id', $('#PCPNDTModel_FacilityModel_Id').val() == '' ? 0 : $('#PCPNDT_FacilityModel_Id').val());
                fileData.append('Faclities', facilities.join());
                fileData.append('Name', $('#PCPNDTModel_FacilityModel_Name').val());
                fileData.append('DistrictId', $('#PCPNDTModel_FacilityModel_DistrictId').val());
                fileData.append('MandalId', $('#PCPNDTModel_FacilityModel_MandalId').val());
                fileData.append('VillageId', $('#PCPNDTModel_FacilityModel_VillageId').val());
                fileData.append('HouseNumber', $('#PCPNDTModel_FacilityModel_HouseNumber').val());
                fileData.append('StreetName', $('#PCPNDTModel_FacilityModel_StreetName').val());
                fileData.append('PINCode', $('#PCPNDTModel_FacilityModel_PINCode').val());
                fileData.append('Phone', $('#PCPNDTModel_FacilityModel_Phone').val());
                fileData.append('Email', $('#PCPNDTModel_FacilityModel_Email').val());
                fileData.append('Fax', $('#PCPNDTModel_FacilityModel_Fax').val());
                fileData.append('Telegraph', $('#PCPNDTModel_FacilityModel_Telegraph').val());
                fileData.append('Telex', $('#PCPNDTModel_FacilityModel_Telex').val());
                fileData.append('PINCode', $('#PCPNDTModel_FacilityModel_PINCode').val());

                if(addressProof != undefined)
                    fileData.append('AddressProofPath', addressProof.name);
                if(buildingLayout != undefined)
                    fileData.append('BuildingLayoutPath', buildingLayout.name);

                $.ajax({
                    type: "POST",
                    url: url,
                    cache: false,
                    data: fileData,
                    contentType: false,
                    processData: false,
                    async: true,
                    success: function (response) {

                        //$('#PCPNDT_FacilityModel_Id').val(response.ReturnData.split(',')[0]);
                        ShowModal(response);


                    },
                    failure: function (response) {
                        alert('failure: ' + response.d);
                    },
                    error: function (response) {
                        alert('error: ' + response.d);
                    }
                });
            }
            else{
                alert("FormData is not supported.");
            }
     //   }
    });

    $('#tabFacilityinfo input').attr('readonly','readonly');

    //$('#divfacilitycheckbox1 select').attr('disabled','disabled');

    function ShowTestsFacilities(facilityId){
        switch (facilityId) {
            case '1':   //Generic Counselling Center
            case '6':   //Assisted Reproductive Technology (ART)
                {
                    if(facilityId){
                        $('#fsTestsRemarks').show();
                        $('#fsFacilityRemarks').show();
                    }
                    else{
                        $('#fsTestsRemarks').hide();
                        $('#fsFacilityRemarks').hide();
                    }
                }
                break;
            case '2':   //Ultra Sound Clinic
            case '3':   //Imaging Center
                {
                    if(facilityId){
                        $('#fsNonInvasive').show();
                        $('#fsFacilityRemarks').show();
                    }
                    else{
                        $('#fsNonInvasive').hide();
                        $('#fsFacilityRemarks').hide();
                    }
                }
                break;
            case '4':   //Genetic Clinic
            case '5':   //Generic Laboratory
                {
                    if(facilityId){
                        $('#fsInvasive').show();
                        $('#fsNonInvasive').show();
                        $('#fsTests').show();
                        $('#fsStudies').show();
                    }
                    else{
                        $('#fsInvasive').hide();
                        $('#fsNonInvasive').hide();
                        $('#fsTests').hide();
                        $('#fsStudies').hide();
                    }
                }
                break;
            default:

        }
    }
    function RemoveValuesfromHiddenControls(){
        if ($('#fsInvasive').css('display') == 'none') {
            $.each($("input[name='testinvasive']"), function () {
                $(this).iCheck('uncheck');
            });
        }

        if ($('#fsNonInvasive').css('display') == 'none') {
            $.each($("input[name='testnoninvasive']"), function () {
                $(this).iCheck('uncheck');
            });
        }

        if ($('#fsTestsRemarks').css('display') == 'none') {
            $('#TestsModel_Remarks').val('');
        }

        if ($('#fsTests').css('display') == 'none') {
            $.each($("input[name='facilitytest']"), function () {
                $(this).iCheck('uncheck');
            });
        }

        if ($('#fsStudies').css('display') == 'none') {
            $.each($("input[name='facilitystudies']"), function () {
                $(this).iCheck('uncheck');
            });
        }

        if ($('#fsFacilityRemarks').css('display') == 'none') {
            $('#FacilitiesModel_Remarks').val('');
        }
    }

    $('#btnTestSave').on('click', function (e) {
       
        e.preventDefault();
        var invaive = [];
        $.each($("input[name='testinvasive']"), function () {
            if ($(this).parent('[class*="icheckbox"]').hasClass("checked"))
                invaive.push(this.value);
        });

        if (invaive.length == 0) {
            alert('Please select at least one Invasive Test');
            return false;
        }

        var noninvaive = [];
        $.each($("input[name='testnoninvasive']"), function () {
            if ($(this).parent('[class*="icheckbox"]').hasClass("checked"))
                noninvaive.push(this.value);
        });

        if (noninvaive.length == 0) {
            alert('Please select at least one Non-Invasive Test');
            return false;
        }

        if ($('#formTests').valid()) {

            var url = '@Url.Action("SaveTestsAmendment", "Amendment", new { Area = "User" })';
            var data = {
                model: {
                    Id: $('#PCPNDTModel_TestsModel_Id').val() == '' ? 0 : $('#PCPNDTModel_TestsModel_Id').val(),
                    InvasiveTests: invaive.join(),
                    NonInvasiveTests: noninvaive.join(),
                    Remarks: $('#PCPNDTModel_TestsModel_Remarks').val()
                }
            };
            var jqxhr = $.post(url, data, function () { })
        .done(function (response) {
            //var json;
            //if (response instanceof Object)
            //    json = response;
            //else
            //    json = $.parseJSON(response);

            //$('#PCPNDTModel_TestsModel_Id').val(response.ReturnData.split(',')[0]);
            ShowModal(response);


        })
    .fail(function (jqxhr, status, error) {
        var err = status + ", " + error;
        console.log("Save Facility Request Failed: " + err);
    });
        }
    });

    $('#btnAddEquipment').on('click', function (e) {
        e.preventDefault();
        if ($('#formEquipment').valid()) {
            var uri = '@Url.Action("AddEquipment", "Amendment", new { Area = "User" })';

            if (window.FormData !== undefined) {
                var uploadedFile = $("#PCPNDTModel_EquipmentModel_UploadedFilePath").get(0).files[0];

                // Create FormData object
                var fileData = new FormData();
                fileData.append('Id', $('#PCPNDTModel_EquipmentModel_Id').val() == '' ? 0 : $('#PCPNDTModel_EquipmentModel_Id').val());
                fileData.append('Name', $('#PCPNDTModel_EquipmentModel_Name').val());
                fileData.append('SerialNumber', $('#PCPNDTModel_EquipmentModel_SerialNumber').val());
                fileData.append('MachineModel', $('#PCPNDTModel_EquipmentModel_MachineModel').val());
                fileData.append('Make', $('#PCPNDTModel_EquipmentModel_Make').val());
                fileData.append('Type', $('#PCPNDTModel_EquipmentModel_Type').val());
                fileData.append('UploadedFilePath', uploadedFile.name);
                fileData.append('UploadedFile', uploadedFile);

                $.ajax({
                    type: "POST",
                    url: uri,
                    data: fileData,
                    contentType: false,
                    processData: false,
                    async: true,
                    success: function (response) {
                        // Clear controls
                        $('#PCPNDTModel_EquipmentModel_Name').val('');
                        $('#PCPNDTModel_EquipmentModel_SerialNumber').val('');
                        $('#PCPNDTModel_EquipmentModel_MachineModel').val('');
                        $('#PCPNDTModel_EquipmentModel_Make').val('');
                        $('#PCPNDTModel_EquipmentModel_Type').val('');
                        $('#PCPNDTModel_EquipmentModel_UploadedFilePath').val('');

                        $('#tblEquiments tr').not(function () { return !!$(this).has('th').length; }).remove();

                        var json = response;

                        var tr;
                        //Append each row to html table
                        for (var i = 0; i < json.length; i++) {
                            tr = $('<tr/>');
                            tr.append("<td>" + (i + 1) + "</td>");
                            tr.append("<td>" + json[i].Name + "</td>");
                            tr.append("<td>" + json[i].SerialNumber + "</td>");
                            tr.append("<td>" + json[i].MachineModel + "</td>");
                            tr.append("<td>" + json[i].Make + "</td>");
                            tr.append("<td>" + json[i].Type + "</td>");

                            var path = json[i].UploadedFilePath;
                            var index = path.indexOf("/");
                            var displayFileName = path.substring(index + 1, path.length);
                            var fileLink = '@Html.Raw(Html.ActionLink("displaytext", "DownloadFile", "Generic", new { Area = "", path = "filepath", downloadName = "downloadfilename" }, null))';
                            fileLink = fileLink.replace("displaytext", displayFileName);
                            fileLink = fileLink.replace("filepath", json[i].UploadedFilePath);
                            fileLink = fileLink.replace("downloadfilename", displayFileName);
                            tr.append("<td>" + fileLink + "</td>");
                            if(json[i].Id!=0 && json[i].IsDeleted==false)
                            {
                                tr.append("<td>Existing</td>");
                                tr.append("<td><input type='button' value='Delete' onclick='DeleteEquipment(" + i + ");'/></td>");
                            }
                            if (json[i].Id==0 && json[i].IsDeleted==false)
                            {
                                tr.append("<td>New</td>");
                                tr.append("<td><input type='button' value='Delete' onclick='DeleteEquipment(" + i + ");'/></td>");
                            }
                            if(json[i].Id!=0 && json[i].IsDeleted==true)
                            {
                                tr.append("<td>Deleted</td>");
                            }

                            //tr.append("<td><a href='javascript:void(0);' onclick='DeleteEquipment(" + i + ");' text='Delete'></a></td>");

                            $('#tblEquiments').append(tr);
                        }
                    },
                    failure: function (response) {
                        alert('failure: ' + response.d);
                    },
                    error: function (response) {
                        alert('error: ' + response.d);
                    }
                });

            } else {
                alert("FormData is not supported.");
            }
        }
    });

    function DeleteEquipment(index) {
       
        if (confirm('Do you really want to delete this equipment?')) {
            var url = '@Url.Action("DeleteEquipment","Amendment", new { Area = "User" })';
            var data = { index: index };
            var jqxhr = $.post(url, data, function () { })
    .done(function (response) {
        var json;
        if (response instanceof Object)
            json = response;
        else
            json = $.parseJSON(response);
        $('#tblEquiments tr').not(function () { return !!$(this).has('th').length; }).remove();
        if (json != undefined) {
            var tr;
            //Append each row to html table
            for (var i = 0; i < json.length; i++) {
                tr = $('<tr/>');
                tr.append("<td>" + (i +1) + "</td>");
                tr.append("<td>" + json[i].Name + "</td>");
                tr.append("<td>" + json[i].SerialNumber + "</td>");
                tr.append("<td>" + json[i].MachineModel + "</td>");
                tr.append("<td>" + json[i].Make + "</td>");
                tr.append("<td>" + json[i].Type + "</td>");

                var path = json[i].UploadedFilePath;
                var index = path.indexOf("/");
                var displayFileName = path.substring(index + 1, path.length);
                var fileLink = '@Html.Raw(Html.ActionLink("displaytext", "DownloadFile", "Generic", new { Area = "", path = "filepath", downloadName = "downloadfilename" }, null))';
                fileLink = fileLink.replace("displaytext", displayFileName);
                fileLink = fileLink.replace("filepath", json[i].UploadedFilePath);
                fileLink = fileLink.replace("downloadfilename", displayFileName);
                tr.append("<td>" + fileLink + "</td>");
                if (json[i].Id!=0 && json[i].IsDeleted==false)
                {
                    tr.append("<td>Existing</td>");
                    tr.append("<td><input type='button' value='Delete' onclick='DeleteEquipment(" + i + ");'/></td>");
                }
                if (json[i].Id==0 && json[i].IsDeleted==false)
                {
                    tr.append("<td>New</td>");
                    tr.append("<td><input type='button' value='Delete' onclick='DeleteEquipment(" + i + ");'/></td>");
                }
                if (json[i].Id!=0 && json[i].IsDeleted==true)
                {
                    tr.append("<td>Deleted</td>");
                }



                $('#tblEquiments').append(tr);
            }
        }
        else if(json == undefined || json.length == 0){
            $('#btnTestSave').val('Save');
            $('#btnTestSave').removeClass('btn-success');
            $('#btnTestSave').addClass('btn-primary');
        }
        CheckforEnableSubmit();
    }
    )
.fail(function (jqxhr, status, error) {
    var err = status + ", " + error;
    console.log("Delete Equipment Request Failed: " + err);
});
        }
    }

    $('#btnEquipmentSave').on('click', function (e) {
        e.preventDefault();
        var url = '@Url.Action("SaveEquipments", "Amendment", new { Area = "User" })';
        var jqxhr = $.post(url, function () { })
    .done(function (response) {
        var json;
        if (response instanceof Object)
            json = response;
        else
            json = $.parseJSON(response);

        ShowModal(response);
        var transactionId = response.ReturnData.split(',')[0];
        BindEquipmentsOnSave(transactionId);

        //if(response.ReturnData.split(',')[1] == 'PartiallySaved'){
        //    $('#btnEquipmentSave').val('Update');
        //    $('#btnEquipmentSave').removeClass('btn-success');
        //    $('#btnEquipmentSave').addClass('btn-primary');
        //}
        //else if(response.ReturnData.split(',')[1] == 'Completed'){
        //    $('#btnEquipmentSave').val('Update');
        //    $('#btnEquipmentSave').removeClass('btn-primary');
        //    $('#btnEquipmentSave').addClass('btn-success');
        //}


        CheckforEnableSubmit();
    })
.fail(function (jqxhr, status, error) {
    var err = status + ", " + error;
    console.log("SaveEquipments Request Failed: " + err);
});
    });

    function BindEquipmentsOnSave(transactionId){
        var url = '@Url.Action("GetEquipments", "Amendment", new { Area = "User" })';
        var data = {transactionId : transactionId};
        var jqxhr = $.post(url, data, function () { }, "json")
    .done(function (response) {
        var json;
        if (response instanceof Object)
            json = response;
        else
            json = $.parseJSON(response);

        $('#tblEquiments tr').not(function () { return !!$(this).has('th').length; }).remove();
        if (json != undefined && json.length != 0) {
            var tr;
            //Append each row to html table
            for (var i = 0; i < json.length; i++) {
                tr = $('<tr/>');
                tr.append("<td>" + (i + 1) + "</td>");
                tr.append("<td>" + json[i].Name + "</td>");
                tr.append("<td>" + json[i].SerialNumber + "</td>");
                tr.append("<td>" + json[i].MachineModel + "</td>");
                tr.append("<td>" + json[i].Make + "</td>");
                tr.append("<td>" + json[i].Type + "</td>");

                var path = json[i].UploadedFilePath;
                var index = path.indexOf("/");
                var displayFileName = path.substring(index + 1, path.length);
                var fileLink = '@Html.Raw(Html.ActionLink("displaytext", "DownloadFile", "Generic", new { Area = "", path = "filepath", downloadName = "downloadfilename" }, null))';
                fileLink = fileLink.replace("displaytext", displayFileName);
                fileLink = fileLink.replace("filepath", json[i].UploadedFilePath);
                fileLink = fileLink.replace("downloadfilename", displayFileName);
                tr.append("<td>" + fileLink + "</td>");
                tr.append("<td><input type='button' value='Delete' onclick='DeleteEquipment(" + i + ");'/></td>");


                $('#tblEquiments').append(tr);
            }

            $('#btnEquipmentSave').val('Update');
            $('#btnEquipmentSave').removeClass('btn-primary');
            $('#btnEquipmentSave').addClass('btn-success');
        }
        else if(json == undefined || json.length == 0){
            $('#btnEquipmentSave').val('Save');
            $('#btnEquipmentSave').removeClass('btn-success');
            $('#btnEquipmentSave').addClass('btn-primary');
        }
    })
        .fail(function (jqxhr, status, error) {
            var err = status + ", " + error;
            console.log("GetEquipments Request Failed: " + err);
        });

    }

    $('#btnFacilicitesSave').on('click', function (e) {
        e.preventDefault();
        var tests = []; var studies = [];
        $.each($("input[name='facilitytest']"), function () {
            if ($(this).parent('[class*="icheckbox"]').hasClass("checked"))
                tests.push(this.value);
        });

        if (tests.length == 0) {
            alert('Please select at least one Test');
            return false;
        }

        $.each($("input[name='facilitystudies']"), function () {
            if ($(this).parent('[class*="icheckbox"]').hasClass("checked"))
                studies.push(this.value);
        });

        //if (studies.length == 0) {
        //    alert('Please select at least one Study');
        //    return false;
        //}

        if ($('#formFacilities').valid()) {

            var url = '@Url.Action("SaveFacilitiesamendment", "Amendment", new { Area = "User" })';
            var data = {
                model: {
                    Id: $('#PCPNDTModel_FacilitiesModel_Id').val() == '' ? 0 : $('#PCPNDTModel_FacilitiesModel_Id').val(),
                    Tests: tests.join(),
                    Studies: studies.join(),
                    Remarks: $('#PCPNDTModel_FacilitiesModel_Remarks').val()
                }
            };
            var jqxhr = $.post(url, data, function () { })
        .done(function (response) {
            //var json;
            //if (response instanceof Object)
            //    json = response;
            //else
            //    json = $.parseJSON(response);

            //$('#PCPNDTModel_FacilitiesModel_Id').val(response.ReturnData.split(',')[0]);
            ShowModal(response);


        })
    .fail(function (jqxhr, status, error) {
        var err = status + ", " + error;
        console.log("Save Facilities Request Failed: " + err);
    });
        }
    });

    $('#btnAddEmployee').on('click', function (e) {
      
        e.preventDefault();
        if ($('#formEmployee').valid()) {

            var uri = '@Url.Action("AddEmployeeAmendment", "Amendment", new { Area = "User" })';

            if (window.FormData !== undefined) {
                var uploadedFile = $("#PCPNDTModel_EmployeeModel_UploadedFilePath").get(0).files[0];

                // Create FormData object
                var fileData = new FormData();

                fileData.append('Id', $('#PCPNDTModel_EmployeeModel_Id').val() == '' ? 0 : $('#PCPNDTModel_EmployeeModel_Id').val());
                fileData.append('Name', $('#PCPNDTModel_EmployeeModel_Name').val());
                fileData.append('DesignationId', $('#PCPNDTModel_EmployeeModel_DesignationId').val());
                fileData.append('DesignationName', $("#PCPNDTModel_EmployeeModel_DesignationId option:selected").text());
                fileData.append('Experience', $('#PCPNDTModel_EmployeeModel_Experience').val());
                fileData.append('RegistrationNumber', $('#PCPNDTModel_EmployeeModel_RegistrationNumber').val());
                fileData.append('UploadedFilePath', uploadedFile.name);
                fileData.append('UploadedFile', uploadedFile);

                $.ajax({
                    type: "POST",
                    url: uri,
                    data: fileData,
                    contentType: false,
                    processData: false,
                    async: true,
                    success: function (response) {
                        // Clear controls
                        $('#PCPNDTModel_EmployeeModel_Name').val('');
                        $('#PCPNDTModel_EmployeeModel_DesignationId').val('');
                        $('#PCPNDTModel_EmployeeModel_Experience').val('');
                        $('#PCPNDTModel_EmployeeModel_RegistrationNumber').val('');
                        $('#PCPNDTModel_EmployeeModel_UploadedFilePath').val('');

                        $('#tblEmployees tr').not(function () { return !!$(this).has('th').length; }).remove();

                        var json = response;

                        var tr;
                        //Append each row to html table
                        for (var i = 0; i < json.length; i++) {
                            tr = $('<tr/>');
                            tr.append("<td>" + (i + 1) + "</td>");
                            tr.append("<td>" + json[i].Name + "</td>");
                            tr.append("<td>" + json[i].DesignationName + "</td>");
                            tr.append("<td>" + json[i].Experience + "</td>");
                            tr.append("<td>" + json[i].RegistrationNumber + "</td>");
                            var path = json[i].UploadedFilePath;
                            var index = path.indexOf("/");
                            var displayFileName = path.substring(index + 1, path.length);
                            var fileLink = '@Html.Raw(Html.ActionLink("displaytext", "DownloadFile", "Generic", new { Area = "", path = "filepath", downloadName = "downloadfilename" }, null))';
                            fileLink = fileLink.replace("displaytext", displayFileName);
                            fileLink = fileLink.replace("filepath", json[i].UploadedFilePath);
                            fileLink = fileLink.replace("downloadfilename", displayFileName);
                            tr.append("<td>" + fileLink + "</td>");

                            if (json[i].Id!=0 && json[i].IsDeleted==false)
                            {
                                tr.append("<td>Existing</td>");
                                tr.append("<td><input type='button' value='Delete' onclick='DeleteEmployee(" + i + ");'/></td>");
                            }
                            if (json[i].Id==0 && json[i].IsDeleted==false)
                            {
                                tr.append("<td>New</td>");
                                tr.append("<td><input type='button' value='Delete' onclick='DeleteEmployee(" + i + ");'/></td>");
                            }
                            if (json[i].Id!=0 && json[i].IsDeleted==true)
                            {
                                tr.append("<td>Deleted</td>");

                            }
                            $('#tblEmployees').append(tr);
                        }
                       // CheckforEnableSubmit();
                    },
                    failure: function (response) {
                        alert('failure: ' + response.d);
                    },
                    error: function (response) {
                        alert('error: ' + response.d);
                    }
                });

            } else {
                alert("FormData is not supported.");
            }
        }
    });

    function DeleteEmployee(index) {
       
        if (confirm('Do you really want to delete this equipment?')) {
            var url = '@Url.Action("DeleteEmployeeAmendment", "Amendment", new { Area = "User" })';
            var data = { index: index };
            var jqxhr = $.post(url, data, function () { })
    .done(function (response) {
        var json;
        if (response instanceof Object)
            json = response;
        else
            json = $.parseJSON(response);

        $('#tblEmployees tr').not(function () { return !!$(this).has('th').length; }).remove();
        if (json != undefined) {
            var tr;
            //Append each row to html table
            for (var i = 0; i < json.length; i++) {
                tr = $('<tr/>');
                tr.append("<td>" + (i + 1) + "</td>");
                tr.append("<td>" + json[i].Name + "</td>");
                tr.append("<td>" + json[i].DesignationName + "</td>");
                tr.append("<td>" + json[i].Experience + "</td>");
                tr.append("<td>" + json[i].RegistrationNumber + "</td>");

                var path = json[i].UploadedFilePath;
                var index = path.indexOf("/");
                var displayFileName = path.substring(index + 1, path.length);
                var fileLink = '@Html.Raw(Html.ActionLink("displaytext", "DownloadFile", "Generic", new { Area = "", path = "filepath", downloadName = "downloadfilename" }, null))';
                fileLink = fileLink.replace("displaytext", displayFileName);
                fileLink = fileLink.replace("filepath", json[i].UploadedFilePath);
                fileLink = fileLink.replace("downloadfilename", displayFileName);
                tr.append("<td>" + fileLink + "</td>");

                if(json[i].Id !=0 && json[i].IsDeleted==false)
                {
                    tr.append("<td>Existing</td>");
                    tr.append("<td><input type='button' value='Delete' onclick='DeleteEmployee(" + i + ");'/></td>");
                }
               else  if (json[i].Id==0 && json[i].IsDeleted==false)
                {
                    tr.append("<td>New</td>");
                    tr.append("<td><input type='button' value='Delete' onclick='DeleteEmployee(" + i + ");'/></td>");
                }
                else if (json[i].Id !=0 && json[i].IsDeleted==true)
                {
                    tr.append("<td>Deleted</td>");
                }



                $('#tblEmployees').append(tr);
            }
        }
        else if(json == undefined || json.length == 0){
            $('#btnEmployeeSave').val('Save');
            $('#btnEmployeeSave').removeClass('btn-success');
            $('#btnEmployeeSave').addClass('btn-primary');
        }

        CheckforEnableSubmit();
    })
.fail(function (jqxhr, status, error) {
    var err = status + ", " + error;
    console.log("Delete Employee Request Failed: " + err);
});
        }
    }


    $('#btnEmployeeSave').on('click', function (e) {
       
        e.preventDefault();
        var url = '@Url.Action("SaveEmployeeDetails", "Amendment", new { Area = "User" })';
        var jqxhr = $.post(url, function () { })
    .done(function (response) {
        var json;
        if (response instanceof Object)
            json = response;
        else
            json = $.parseJSON(response);

        ShowModal(response);
        var transactionId = response.ReturnData.split(',')[0];
        BindEmployeesOnSave(transactionId);

        CheckforEnableSubmit();
    })
.fail(function (jqxhr, status, error) {
    var err = status + ", " + error;
    console.log("SaveEmployees Request Failed: " + err);
});
    });

    function BindEmployeesOnSave(transactionId){
        var url = '@Url.Action("GetEmployees", "Amendment", new { Area = "User" })';
        var data = {transactionId : transactionId};
        var jqxhr = $.post(url, data, function () { }, "json")
    .done(function (response) {
        var json;
        if (response instanceof Object)
            json = response;
        else
            json = $.parseJSON(response);

        $('#tblEmployees tr').not(function () { return !!$(this).has('th').length; }).remove();
        if (json != undefined && json.length != 0) {
            var tr;
            //Append each row to html table
            for (var i = 0; i < json.length; i++) {
                tr = $('<tr/>');
                tr.append("<td>" + (i + 1) + "</td>");
                tr.append("<td>" + json[i].Name + "</td>");
                tr.append("<td>" + json[i].Designation + "</td>");
                tr.append("<td>" + json[i].Experience + "</td>");
                tr.append("<td>" + json[i].RegistrationNumber + "</td>");

                var path = json[i].UploadedFilePath;
                var index = path.indexOf("/");
                var displayFileName = path.substring(index + 1, path.length);
                var fileLink = '@Html.Raw(Html.ActionLink("displaytext", "DownloadFile", "Generic", new { Area = "", path = "filepath", downloadName = "downloadfilename" }, null))';
                fileLink = fileLink.replace("displaytext", displayFileName);
                fileLink = fileLink.replace("filepath", json[i].UploadedFilePath);
                fileLink = fileLink.replace("downloadfilename", displayFileName);
                tr.append("<td>" + fileLink + "</td>");
                if (json[i].Id!=0 && json[i].IsDeleted==false)
                {
                    tr.append("<td>Existing</td>");
                    tr.append("<td><input type='button' value='Delete' onclick='DeleteEmployee(" + i + ");'/></td>");
                }
                if (json[i].Id==0 && json[i].IsDeleted==false)
                {
                    tr.append("<td>New</td>");
                    tr.append("<td><input type='button' value='Delete' onclick='DeleteEmployee(" + i + ");'/></td>");
                }
                if (json[i].Id!=0 && json[i].IsDeleted==true)
                {
                    tr.append("<td>Deleted</td>");

                }


                $('#tblEmployees').append(tr);
            }

            $('#btnEmployeeSave').val('Update');
            $('#btnEmployeeSave').removeClass('btn-primary');
            $('#btnEmployeeSave').addClass('btn-success');
        }
        else if(json == undefined || json.length == 0){
            $('#btnEmployeeSave').val('Save');
            $('#btnEmployeeSave').removeClass('btn-success');
            $('#btnEmployeeSave').addClass('btn-primary');
        }
    })
        .fail(function (jqxhr, status, error) {
            var err = status + ", " + error;
            console.log("GetEquipments Request Failed: " + err);
        });

    }

    $('#PCPNDTModel_InstitutionModel_OwnershipTypeId').on('change', function(){

        if(this.value != ''){
            debugger;
            $('#divOwnershipUploads').show();
            switch (this.value) {
                case '1':
                    {
                        $('#divAffidavitFile').show();
                        $('#divStudyCertificateFiles').show();
                        $('#divAssociationFile').hide();
                    }
                    break;
                case '2':
                case '3':
                case '5':{
                    $('#divAffidavitFile').show();
                    $('#divStudyCertificateFiles').show();
                    $('#divAssociationFile').show();
                    $('#spanArticlesofAssociation').text('Articles of Association');
                }
                    break;
                case '4':{
                    $('#divAffidavitFile').show();
                    $('#divStudyCertificateFiles').show();
                    $('#divAssociationFile').show();
                    $('#spanArticlesofAssociation').text('Articles of Association/Memorandum of Association');
                }
                default:

            }
        }
        else{
            $('#divOwnershipUploads').hide();
        }
    });


    $('#btnInstitutionSave').on('click', function(e){
       
        e.preventDefault();
        if (window.FormData !== undefined) {

            var url = '@Url.Action("SaveInstitutionAmendment", "Amendment", new { Area = "User" })';

            // Create FormData object
            var fileData = new FormData();
            var ownershipId = $('#PCPNDTModel_InstitutionModel_OwnershipTypeId').val();
            fileData.append('Id', $('#PCPNDTModel_InstitutionModel_Id').val() == '' ? 0 : $('#PCPNDTModel_InstitutionModel_Id').val());
            fileData.append('OwnershipTypeId', ownershipId);
            fileData.append('InstitutionTypeId', $('#PCPNDTModel_InstitutionModel_InstitutionTypeId').val());
            fileData.append('TotalWorkArea', $('#PCPNDTModel_InstitutionModel_TotalWorkArea').val());

           
            if(ownershipId != ''){

                switch (ownershipId) {
                    case '1':
                        {
                            var affidavitFile = $('#affidavitFile').get(0).files[0];
                            var StudyCertificateFiles = $("#StudyCertificateFile").get(0).files;

                            fileData.append("affidavitFile", affidavitFile);
                            for (var i = 0; i < StudyCertificateFiles.length; i++) {
                                fileData.append("studyCertificateFiles", StudyCertificateFiles[i]);
                            }

                            
                            if(affidavitFile == undefined || StudyCertificateFiles.length == 0){
                                var InstitutionModel = @Html.Raw(Json.Encode(Model.PCPNDTModel.InstitutionModel));
                                if(InstitutionModel.AffidavitDocPath == undefined){
                                    alert('Please upload required files');
                                    return false;
                                }

                            }
                        }
                        break;
                    case '2':
                    case '3':
                    case '4':
                    case '5':{
                        var affidavitFile = $('#affidavitFile').get(0).files[0];
                        var articleFile = $('#articlesofAssociationFile').get(0).files[0];
                        var StudyCertificateFiles = $("#StudyCertificateFile").get(0).files;

                        fileData.append("affidavitFile", affidavitFile);
                        fileData.append("articleFile", articleFile);
                        for (var i = 0; i < StudyCertificateFiles.length; i++) {
                            fileData.append("studyCertificateFiles", StudyCertificateFiles[i]);
                        }

                        debugger;
                        if(affidavitFile == undefined || articleFile == undefined || StudyCertificateFiles.length == 0){
                            var InstitutionModel = @Html.Raw(Json.Encode(Model.PCPNDTModel.InstitutionModel));
                            if(InstitutionModel.AffidavitDocPath == undefined || InstitutionModel.ArticleDocPath == undefined
                                || InstitutionModel.StudyCertificateDocPaths.length == 0){
                                alert('Please upload required files');
                                return false;
                            }

                        }
                    }
                        break;
                }

            }

            $.ajax({
                type: "POST",
                url: url,
                data: fileData,
                contentType: false,
                processData: false,
                async: true,
                success: function (response) {
                    //var json;
                    //if (response instanceof Object)
                    //    json = response;
                    //else
                    //    json = $.parseJSON(response);

                 //   $('#InstitutionModel_Id').val(response.ReturnData.split(',')[0]);
                    ShowModal(response);

                    //if(response.ReturnData.split(',')[1] == 'PartiallySaved'){
                    //    $('#btnInstitutionSave').val('Update');
                    //    $('#btnInstitutionSave').removeClass('btn-success');
                    //    $('#btnInstitutionSave').addClass('btn-primary');
                    //}
                    //else if(response.ReturnData.split(',')[1] == 'Completed'){
                    //    $('#btnInstitutionSave').val('Update');
                    //    $('#btnInstitutionSave').removeClass('btn-primary');
                    //    $('#btnInstitutionSave').addClass('btn-success');
                    //}
                    //else if(response.ReturnData.split(',')[1] == 'Empty'){
                    //    $('#btnInstitutionSave').val('Save');
                    //    $('#btnInstitutionSave').removeClass('btn-success');
                    //    $('#btnInstitutionSave').addClass('btn-primary');
                    //}

                    //CheckforEnableSubmit();
                },
                failure: function (response) {
                    alert('failure: ' + response.d);
                },
                error: function (response) {
                    alert('error: ' + response.d);
                }
            });

        }
        else{
            alert("FormData is not supported.");
        }

    });

    $('#btnInstitutionSaveOld').on('click', function (e) {
        e.preventDefault();
        if (true) {  // ($('#formOwnership').valid()) {
            var url = '@Url.Action("SaveInstitution", "License", new { Area = "User" })';
            var data = {
                model: {
                    Id: $('#InstitutionModel_Id').val() == '' ? 0 : $('#InstitutionModel_Id').val(),
                    OwnershipTypeId: $('#InstitutionModel_OwnershipTypeId').val(),
                    InstitutionTypeId: $('#InstitutionModel_InstitutionTypeId').val(),
                    TotalWorkArea: $('#InstitutionModel_TotalWorkArea').val()
                }
            };
            var jqxhr = $.post(url, data, function () { })
        .done(function (response) {
            var json;
            if (response instanceof Object)
                json = response;
            else
                json = $.parseJSON(response);

            $('#InstitutionModel_Id').val(response.ReturnData.split(',')[0]);
            ShowModal(response);

            if(response.ReturnData.split(',')[1] == 'PartiallySaved'){
                $('#btnInstitutionSave').val('Update');
                $('#btnInstitutionSave').removeClass('btn-success');
                $('#btnInstitutionSave').addClass('btn-primary');
            }
            else if(response.ReturnData.split(',')[1] == 'Completed'){
                $('#btnInstitutionSave').val('Update');
                $('#btnInstitutionSave').removeClass('btn-primary');
                $('#btnInstitutionSave').addClass('btn-success');
            }
            else if(response.ReturnData.split(',')[1] == 'Empty'){
                $('#btnInstitutionSave').val('Save');
                $('#btnInstitutionSave').removeClass('btn-success');
                $('#btnInstitutionSave').addClass('btn-primary');
            }

            CheckforEnableSubmit();
        })
    .fail(function (jqxhr, status, error) {
        var err = status + ", " + error;
        console.log("SaveInstitution Request Failed: " + err);
    });
        }
    });

    $('#btnDeclarationSave').on('click', function (e) {
        debugger;
        e.preventDefault();
        if (true) {  // ($('#formDeclaration').valid()) {
            var url = '@Url.Action("SaveDeclarationDetails", "License", new { Area = "User" })';
            var data = {
                model: {
                    Id: $('#DeclarationModel_Id').val() == '' ? 0 : $('#DeclarationModel_Id').val(),
                    Name: $('#DeclarationModel_Name').val(),
                    SonOf: $('#DeclarationModel_SonOf').val(),
                    Age: $('#DeclarationModel_Age').val(),
                    ResidentOf: $('#DeclarationModel_ResidentOf').val(),
                    Designation: $('#DeclarationModel_Designation').val(),
                    Organization: $('#DeclarationModel_Organization').val(),
                    Date: $('#DeclarationModel_Date').val(),
                    Place: $('#DeclarationModel_Place').val(),
                    Signature: $('#DeclarationModel_Signature').val()
                }
            };
            var jqxhr = $.post(url, data, function () { })
        .done(function (response) {
            var json;
            if (response instanceof Object)
                json = response;
            else
                json = $.parseJSON(response);

            $('#DeclarationModel_Id').val(response.ReturnData.split(',')[0]);
            ShowModal(response);

            if(response.ReturnData.split(',')[1] == 'PartiallySaved'){
                $('#btnDeclarationSave').val('Update');
                $('#btnDeclarationSave').removeClass('btn-success');
                $('#btnDeclarationSave').addClass('btn-primary');
            }
            else if(response.ReturnData.split(',')[1] == 'Completed'){
                $('#btnDeclarationSave').val('Update');
                $('#btnDeclarationSave').removeClass('btn-primary');
                $('#btnDeclarationSave').addClass('btn-success');
            }
            else if(response.ReturnData.split(',')[1] == 'Empty'){
                $('#btnDeclarationSave').val('Save');
                $('#btnDeclarationSave').removeClass('btn-success');
                $('#btnDeclarationSave').addClass('btn-primary');
            }

            CheckforEnableSubmit();
        })
    .fail(function (jqxhr, status, error) {
        var err = status + ", " + error;
        console.log("Save Declaration Request Failed: " + err);
    });
        }
    });



    $('#btnLicenseSearch').click(function (e){
        debugger;
        e.preventDefault();
        var uri = '@Url.Action("SearchLicenseByLicenseNo", "Amendment", new { Area = "User" })';
            var data = {
                model: {
                    LicenseNo: $('#PCPNDTModel_cancelLiceseModel_LicenseNo').val(),
                }
            }
            var jqxhr = $.post(uri, data, function () { }, 'json')
            .done(function (response) {
                console.log(response);
                if(response.NotificationType==undefined)
                {
                    // Bind controls
                    $("#lblLicenseNo").text(response.LicenseNo);
                    $("#lblIsseuDate").text(ToJavaScriptDate(response.IsseuDate));
                    $("#lblExpireDate").text(ToJavaScriptDate(response.ExpireDate));
                   
                 
                }
                else
                {
                    // Clear controls
                    $('#lblLicenseNo').text('');
                    $('#lblIsseuDate').text('');
                    $('#lblExpireDate').text('');
                    ShowModal(response);  //error Message Display
                }
             
            })
            .fail(function (jqxhr, textStatus, error) {
                var err = textStatus + ", " + error;
                console.log("License Details Request Failed: " + err);
            });
        
    });




    @*$('#btnLicenseSearchOld').on('click', function (e) {
        debugger
        e.preventDefault();
        var uri = '@Url.Action("SearchLicenseByLicenseNo", "Amendment", new { Area = "User" })';

                $.ajax({
                    type: "POST",
                    url: uri,
                    data: {},
                    contentType: false,
                    processData: false,
                    async: true,
                    success: function (response) {
                        if(response!=null)
                        {
                            // Bind controls
                            $("#PCPNDTModel.cancelLiceseModel.LicenseNo").val(response.LicenseNo);
                            $("#PCPNDTModel.cancelLiceseModel.LicenseIssuedDate").val(response.LicenseIssuedDate);
                            $("#PCPNDTModel.cancelLiceseModel.LicenseExpiryDate").val(response.LicenseExpiryDate);
                        }
                        else
                        {
                            ShowModal(response);  //error Message Display
                        }
                    },
                    failure: function (response) {
                        alert('failure: ' + response.d);
                    },
                    error: function (response) {
                        alert('error: ' + response.d);
                    }
                });
    });*@

    // Script for Edit form Begin
    $(function () {
        BindApplicantData();
        //BindEstablishmentData();
        BindFacilityData();
        BindTestsData();
        BindEquipmentData();
        BindFacilitiesData();
        BindEmployeeData();
        BindInstitutionData();
        BindDeclarationData();
        CheckforEnableSubmit();
    });

    function BindApplicantData(){
        var applicantModel = @Html.Raw(Json.Encode(Model.PCPNDTModel.ApplicantModel));
        if(applicantModel.FormStatus != 0){
            $('#btnApplicantSave').val('Update');
            $('#btnApplicantSave').removeClass('btn-primary');
            $('#btnApplicantSave').addClass('btn-success');

            if(applicantModel.DistrictId > 0)
            {
                BindMandals('ApplicantModel_', applicantModel.DistrictId);
                setTimeout(
                   function(){
                       if(applicantModel.MandalId > 0){
                           $('#ApplicantModel_MandalId').val(applicantModel.MandalId).trigger('change');
                           BindVillages('ApplicantModel_', applicantModel.MandalId);
                           setTimeout(function(){
                               if(applicantModel.VillageId > 0){
                                   $('#ApplicantModel_VillageId').val(applicantModel.VillageId).trigger('change');
                               }
                           }, 2000);
                       }
                   }
                    , 2000);
            }
        }
    }



    function BindFacilityData(){
        var FacilityModel = @Html.Raw(Json.Encode(Model.PCPNDTModel.FacilityModel));
        if(FacilityModel.FormStatus != 0){
            $('#btnFacilitySave').val('Update');
            $('#btnFacilitySave').removeClass('btn-primary');
            $('#btnFacilitySave').addClass('btn-success');

            if(FacilityModel.DistrictId > 0)
            {
                BindMandals('FacilityModel_', FacilityModel.DistrictId);
                setTimeout(
                   function(){
                       if(FacilityModel.MandalId > 0){
                           $('#FacilityModel_MandalId').val(FacilityModel.MandalId).trigger('change');
                           BindVillages('FacilityModel_', FacilityModel.MandalId);
                           setTimeout(function(){
                               if(FacilityModel.VillageId > 0){
                                   $('#FacilityModel_VillageId').val(FacilityModel.VillageId).trigger('change');
                               }
                           }, 2000);
                       }
                   }
                    , 2000);
            }

            // Bind checkboxes
            var facilities = FacilityModel.Faclities;
            if (facilities != undefined && facilities.length > 0) {
                var arrFacilities = facilities.split(',');
                for (var i = 0; i < arrFacilities.length; i++) {
                    $('input:checkbox[name="facilitytype"][value="' + arrFacilities[i] + '"]').iCheck('check');
                    ShowTestsFacilities(arrFacilities[i]);
                }
            }
        }
    }

    function BindTestsData(){
        var TestsModel = @Html.Raw(Json.Encode(Model.PCPNDTModel.TestsModel));
        if(TestsModel.FormStatus != 0){
            $('#btnTestSave').val('Update');
            $('#btnTestSave').removeClass('btn-primary');
            $('#btnTestSave').addClass('btn-success');

            // Bind Invasive in Tests tab
            var invasives = TestsModel.InvasiveTests;
            if (invasives != undefined && invasives.length > 0) {
                var arrInvasives = invasives.split(',');
                for (var i = 0; i < arrInvasives.length; i++) {
                    $('input:checkbox[name="testinvasive"][value="' + arrInvasives[i] + '"]').iCheck('check');
                }
            }

            // Bind Non-Invasive in Tests tab
            var noninvasives = TestsModel.NonInvasiveTests;
            if (noninvasives != undefined && noninvasives.length > 0) {
                var arrNonInvasives = noninvasives.split(',');
                for (var i = 0; i < arrNonInvasives.length; i++) {
                    $('input:checkbox[name="testnoninvasive"][value="' + arrNonInvasives[i] + '"]').iCheck('check');
                }
            }
        }
    }

    function BindEquipmentData(){
        var EquipmentModel = @Html.Raw(Json.Encode(Model.PCPNDTModel.EquipmentModel));
        if(EquipmentModel.FormStatus != 0){
            $('#btnEquipmentSave').val('Update');
            $('#btnEquipmentSave').removeClass('btn-primary');
            $('#btnEquipmentSave').addClass('btn-success');
        }
    }

    function BindFacilitiesData(){
        var FacilitiesModel = @Html.Raw(Json.Encode(Model.PCPNDTModel.FacilitiesModel));
        if(FacilitiesModel.FormStatus != 0){
            $('#btnFacilicitesSave').val('Update');
            $('#btnFacilicitesSave').removeClass('btn-primary');
            $('#btnFacilicitesSave').addClass('btn-success');

            // Bind Tests in Facilities tab
            var tests = FacilitiesModel.Tests;
            if (tests != undefined && tests.length > 0) {
                var arrTests = tests.split(',');
                for (var i = 0; i < arrTests.length; i++) {
                    $('input:checkbox[name="facilitytest"][value="' + arrTests[i] + '"]').iCheck('check');
                }
            }

            // Bind Studies in Facilities tab
            var studies = FacilitiesModel.Studies;
            if (studies != undefined && studies.length > 0) {
                var arrStudies = studies.split(',');
                for (var i = 0; i < arrStudies.length; i++) {
                    $('input:checkbox[name="facilitystudies"][value="' + arrStudies[i] + '"]').iCheck('check');
                }
            }
        }
    }

    function BindEmployeeData(){
        var EmployeeModel = @Html.Raw(Json.Encode(Model.PCPNDTModel.EmployeeModel));
        if(EmployeeModel.FormStatus != 0){
            $('#btnEmployeeSave').val('Update');
            $('#btnEmployeeSave').removeClass('btn-primary');
            $('#btnEmployeeSave').addClass('btn-success');
        }
    }

    function BindInstitutionData(){
        var InstitutionModel = @Html.Raw(Json.Encode(Model.PCPNDTModel.InstitutionModel));
        console.log(InstitutionModel);
        var documentJson = InstitutionModel.StudyCertificateDocPaths;


        if (documentJson != undefined) {
            $('#tblStudyCertificates tr').not(function () { return !!$(this).has('th').length; }).remove();
            var tr;
            //Append each row to html table
            for (var i = 0; i < documentJson.length; i++) {
                tr = $('<tr/>');
                tr.append("<td>" + (i + 1) + "</td>");

                var path = documentJson[i].DocumentPath;
                var index = path.indexOf("/");
                var displayFileName = path.substring(index + 1, path.length);
                var fileLink = '@Html.Raw(Html.ActionLink("displaytext", "DownloadFile", "Generic", new { Area = "", path = "filepath", downloadName = "downloadfilename" }, null))';
                fileLink = fileLink.replace("displaytext", displayFileName);
                fileLink = fileLink.replace("filepath", documentJson[i].UploadedFilePath);
                fileLink = fileLink.replace("downloadfilename", displayFileName);
                tr.append("<td>" + fileLink + "</td>");

                if(documentJson[i].Id !=0 && documentJson[i].IsDeleted ==false)
                {
                    tr.append("<td>Existing</td>");
                    tr.append("<td><input type='button' value='Delete' onclick='DeleteStudyCertificate(" + documentJson[i].Id + ");'/></td>");

                }

                if (json[i].Id!=0 && json[i].IsDeleted==true)
                {
                    tr.append("<td>Deleted</td>");
                    tr.append("<td><input type='button' value='Delete' onclick='DeleteStudyCertificate(" + documentJson[i].Id + ");'/></td>");
                }

                $('#tblStudyCertificates').append(tr);
            }


            if(InstitutionModel.OwnershipTypeId > 0){
                $('#divOwnershipUploads').show();
                switch (InstitutionModel.OwnershipTypeId) {
                    case '1':
                        {
                            $('#divAffidavitFile').show();
                            $('#divStudyCertificateFiles').show();
                            $('#divAssociationFile').hide();
                        }
                        break;
                    case '2':
                    case '3':
                    case '5':{
                        $('#divAffidavitFile').show();
                        $('#divStudyCertificateFiles').show();
                        $('#divAssociationFile').show();
                        $('#spanArticlesofAssociation').text('Articles of Association');
                    }
                        break;
                    case '4':{
                        $('#divAffidavitFile').show();
                        $('#divStudyCertificateFiles').show();
                        $('#divAssociationFile').show();
                        $('#spanArticlesofAssociation').text('Articles of Association/Memorandum of Association');
                    }
                    default:

                }
            }
            else{
                $('#divOwnershipUploads').hide();
            }


            if(InstitutionModel.FormStatus != 0){
                $('#btnInstitutionSave').val('Update');
                $('#btnInstitutionSave').removeClass('btn-primary');
                $('#btnInstitutionSave').addClass('btn-success');
            }
        }
    }
    function DeleteStudyCertificate(documentId){
       
        if(confirm('Are you sure to delete this document?')){
            var url = '@Url.Action("DeleteStudyCertificate", "Amendment", new { Area = "User" })';
            var data = {
                id: documentId
            };
            var jqxhr = $.post(url, data, function () { })
        .done(function (response) {
            var documentJson;
            if (response instanceof Object)
                documentJson = response;
            else
                documentJson = $.parseJSON(response);

            console.log(documentJson);

            $('#tblStudyCertificates tr').not(function () { return !!$(this).has('th').length; }).remove();
            var tr;
            //Append each row to html table
            for (var i = 0; i < documentJson.length; i++) {
                tr = $('<tr/>');
                tr.append("<td>" + (i + 1) + "</td>");

                var path = documentJson[i].DocumentPath;
                var index = path.indexOf("/");
                var displayFileName = path.substring(index + 1, path.length);
                var fileLink = '@Html.Raw(Html.ActionLink("displaytext", "DownloadFile", "Generic", new { Area = "", path = "filepath", downloadName = "downloadfilename" }, null))';
                fileLink = fileLink.replace("displaytext", displayFileName);
                fileLink = fileLink.replace("filepath", documentJson[i].UploadedFilePath);
                fileLink = fileLink.replace("downloadfilename", displayFileName);
                tr.append("<td>" + fileLink + "</td>");
                tr.append("<td><input type='button' value='Delete' onclick='DeleteStudyCertificate(" + documentJson[i].Id + ");'/></td>");

                $('#tblStudyCertificates').append(tr);
            }

        })
    .fail(function (jqxhr, status, error) {
        var err = status + ", " + error;
        console.log("DeleteStudyCertificate Request Failed: " + err);
    });
        }
    }

    function BindDeclarationData(){
        var DeclarationModel = @Html.Raw(Json.Encode(Model.PCPNDTModel.DeclarationModel));
        if(DeclarationModel.FormStatus != 0){
            $('#btnDeclarationSave').val('Update');
            $('#btnDeclarationSave').removeClass('btn-primary');
            $('#btnDeclarationSave').addClass('btn-success');
        }
    }
    // Script for Edit form End

    function CheckforEnableSubmit(){
        if($('#btnApplicantSave').hasClass('btn-success') //&& $('#btnEstablishmentSave').hasClass('btn-success')
            && $('#btnFacilitySave').hasClass('btn-success') && $('#btnTestSave').hasClass('btn-success')
            && $('#btnEquipmentSave').hasClass('btn-success') && $('#btnFacilicitesSave').hasClass('btn-success')
        && $('#btnEmployeeSave').hasClass('btn-success') && $('#btnInstitutionSave').hasClass('btn-success')
        && $('#btnDeclarationSave').hasClass('btn-success')
            ){
            $('#btnPreview').removeAttr("disabled");
        }
        else
        {
            $('#btnPreview').attr('disabled', 'disabled');
        }
    }

</script>
<script>
    $(function () {
        var facchkboxval='@Model.FacilityAmendment';
        if(facchkboxval == 'False')
        {
            //Following 3 methods are defined in ApplicationForm View
            BindFacility();
            BindTests();
            BindFacilities();
        }
    });

    function BindFacility() {
        // Bind Facilities in Facility tab
        $.each($("input[name='facilitytype']"), function () {
            $(this).parent('[class*="icheckbox"]').iCheck('disable');
        });

        var facilities = '@Model.PCPNDTModel.FacilityModel.Faclities';
        if (facilities.length > 0) {
            var arrFacilities = facilities.split(',');
            for (var i = 0; i < arrFacilities.length; i++) {
                $('input:checkbox[name="facilitytype"][value="' + arrFacilities[i] + '"]').iCheck('check');
            }
        }
    }

    function BindTests() {
        // Bind Invasive in Tests tab
        $.each($("input[name='testinvasive']"), function () {
            $(this).parent('[class*="icheckbox"]').iCheck('disable');
        });

        var invasives = '@Model.PCPNDTModel.TestsModel.InvasiveTests';
        if (invasives.length > 0) {
            var arrInvasives = invasives.split(',');
            for (var i = 0; i < arrInvasives.length; i++) {
                $('input:checkbox[name="testinvasive"][value="' + arrInvasives[i] + '"]').iCheck('check');
            }
        }

        // Bind Non-Invasive in Tests tab
        $.each($("input[name='testnoninvasive']"), function () {
            $(this).parent('[class*="icheckbox"]').iCheck('disable');
        });

        var noninvasives = '@Model.PCPNDTModel.TestsModel.NonInvasiveTests';
        if (noninvasives.length > 0) {
            var arrNonInvasives = noninvasives.split(',');
            for (var i = 0; i < arrNonInvasives.length; i++) {
                $('input:checkbox[name="testnoninvasive"][value="' + arrNonInvasives[i] + '"]').iCheck('check');
            }
        }
    }

    function BindFacilities() {
        // Bind Tests in Facilities tab
        $.each($("input[name='facilitytest']"), function () {
            $(this).parent('[class*="icheckbox"]').iCheck('disable');
        });

        var tests = '@Model.PCPNDTModel.FacilitiesModel.Tests';
        if (tests.length > 0) {
            var arrTests = tests.split(',');
            for (var i = 0; i < arrTests.length; i++) {
                $('input:checkbox[name="facilitytest"][value="' + arrTests[i] + '"]').iCheck('check');
            }
        }

        // Bind Studies in Facilities tab
        $.each($("input[name='facilitystudies']"), function () {
            $(this).parent('[class*="icheckbox"]').iCheck('disable');
        });

        var studies = '@Model.PCPNDTModel.FacilitiesModel.Studies';
        if (studies.length > 0) {
            var arrStudies = studies.split(',');
            for (var i = 0; i < arrStudies.length; i++) {
                $('input:checkbox[name="facilitystudies"][value="' + arrStudies[i] + '"]').iCheck('check');
            }
        }
    }

</script>